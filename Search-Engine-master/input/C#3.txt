So we've worked so far a little bit with console applications but this time we're going to go a little bit deeper console applications are text based and our run at the command prompt. They typically perform simple tasks that need to be scripted such as compiling a file or encrypting a section of a configuration file and they can have arguments passed to them to control their behavior. Let's go ahead and take a look an example by coding so I'll start off by creating a project under topic. See here called my console. I'm going to add new project dot net core console application navigate to the right location my console and what I'll do here is create a method stub for displaying some output right click and generate a method stub and I'll get rid of these squiggly red lines by just building the console. And let's also set my console as the start of project. So right now I'm just going to paste some code in that you can pause the screen and type in yourself just to display some content. This is not too different from anything that we've done thus far. So I'll go ahead and run this just to make sure that the output displays as we expect and it does so here's our a console application and we're displaying some output and that's what we've been doing so far. But now I want to demonstrate how we can actually get some input. So let's jump back to the main method and create a method stub main call get input press control period and then choose a generate method stub. And now what I'm going to want to do is write to the console type. Your first name and press enter and the way we are going to obtain the input for the name is by setting a variable that we can call first name and using the command console dot red line. And we finish off by adding the parentheses and a semi-colon. Now sometimes you'll see some programmers use read line just to hold the console screen up which is the equivalent of going to debug and start with debugging. But in this case this line is being used exactly what it's intended for it's to read an input from the council and it will place the value that we enter into first name. So now I'm going to go ahead and repeat this but ask a question like type the page number you are in and press ENTER changes to on to make it make more sense. And then it will store the page number into the PGE variable. And lastly we will ride out to the canso hello and use the first name and say that your page number is whatever the user entered. So let's go ahead save that and we'll run. But comment out display output just so that we could see how the input works and I'll hold the control key down and hit F5. Type your first name and press ENTER put in runnel touch the page number you are on and press enter and I'll say 88 my favorite number and when I hit Enter Hello around your page number is 88. So as you see for each line it wait for me to enter the input and then continue executing the code prompted me with another question and then wrote out the results just as we expected. Now hitting any key will terminate the application. One last thing I'd like to show is that if you're writing a console application it might become a little tedious to always type in console. What we can do is move up to the using statements and using this new feature in C-sharp we can just enter using and specify static and write down a system that console. So now when we write our code we don't need to specify console so I can actually delete this and when we run it there's no issue. It runs the same way another approach to passing arguments is by using the properties of the project itself that you're working on. So let's go ahead and actually create another project and this one we will call arguments. I'll say it as the start of project let's do a quick little build and NE here owls just right out to the console there are X amount of arguments. And what is it doing is checking to see the length of an array and that array is passed in here and this main method. And if you recall when you see string and you see two brackets like that you know it's an array that contains strings and the array name is args. In this case so this way it's just checking the length and arrays so then it could tell how many arguments are passing through. Not to get rid of this red squiggly line. I will go ahead and just put in using static system dot con.. So where to run this project. Right now there are zero arguments which makes sense because we did not specify any arguments anywhere. However if we go to the properties of the argument. Project and on the left hand side choose debugging. Here's an area where we can specify arguments that need to be passed in and we can put in several different arguments and different formats. For example I could put in first arg and all we need to do is separate them by spaces. And the second one will be second dash Arg and the third will be third colon. Our And the fourth will be in quotes. For arg. And each of these will be read separately because of the spaces in between. No matter what special characters that we're using. So I can go ahead and say this and go back to our code. And now when we run this it says there are four arguments. Which is exactly what we expect. And if we want to write out these arguments I can enter an for each and I'll just have tab to use this method stup and say for each string. And the args array and will specify a r g as the name of the variable. Let us write it to the console. Just by using the right line command control five and there we go. There are four arguments and listed right below are each of the arguments that we created. So if you're ever creating a system that needs to use a console application to execute some tasks and it needs arguments passed and this is a good way to remember that you don't always need to write values and arguments and code themselves. You can use a property you can as in this case use the properties of the project but also in some projects we use different text files that you read so that it doesn't have to be hard coded within the program that you are writing.
