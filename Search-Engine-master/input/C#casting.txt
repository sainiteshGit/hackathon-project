When coding there's going to be times that you need to convert between types and this section will show you how let's think in terms of numbers and in doing so there are generally two different ways of converting. There's implicit casting and there's explicit casting now for built in numeric types and plus a casting or implicit conversions can be made when the value to be stored can fit into the variable without being truncated or rounded off. So for example a variable of type double which is a bite's can store any value that an int which is 4 bytes can hold so you could see here on the upper right hand corner there's no issue with assigning the variable number two big number because a double is more accurate than int. So there's no chance of loss of any type of data. However if a conversion cannot be made without a risk of losing data the compiler requires that you perform an explicit conversion which is explicit casting a cast as a way of explicitly informing the compiler that you intend to make the conversion and that you are aware that a data loss might occur. So on the bottom right hand corner of the screen we have the double That is one two three four point seven. And where we assign it to an end the output will be 1 2 3 4. Let's go ahead and take a look at this in Visual Studio. So let's go ahead and start out by creating a project under topic see casting and converting between types. And we'll call this casting and converting and choose our correct location. I'll do a quick bill and we'll start off with the method called cast and doubles. And by now you should be familiar with generating a method stub. And so now let's play around a little bit. What we want to do is cast an int variable into a double. And as I mentioned earlier there should be no issue. If I have an aunt with a variable called A and then if I create a double which has a higher precision rate than an integer and assign a to it are double variable is B. This is completely OK. And we can just write a line to the console without any issue the output instead of having to specify console. And we just go to the very top and put in using static system console. And there we go. So now let's save and set our casting and converting project to be the start up and we can execute control F5 and there's half hour or 10. However now if I went ahead and defied double calls see and assigned it the value of nine point eight and then try to define an integer call D and assign see to it. The compiler will complain it will say look I cannot implicitly convert a type double to integer and is telling me an explicit conversion exists. Do you want to cast this. And I can. All I need to do is specify to cast this double into an integer by putting and within parentheses in front of the C. And now the compiler is happy so I'm casting a double variable into an int variable. Likewise I can have a long that I name e and assign it the value of 10 and if I wanted to assign a to an integer I also need to cast this. Now on the next line what I'm going to do is write out to the console the value of E and F. Is this a value. And f is whatever this value is right now after the conversion. Then what I'm going to do is assign the another value now which is the maximum value that a long can have. That's what's happening on 9:28. And then I'm going to cast the as an integer into F.. And we're going to write out her output again after this change. So let's go ahead and comment out the first few lines of code and I'll just go to the top here and choose comment and we will execute to see the output. So the first time around you can see that he is 10. Which makes sense. An F is 10 because we cast it into a full the second time around. We gave the value of its maximum potential as a long and then we cast it into an integer. So there was data loss. Initially it was this huge number 1:51 etc. but after casting it it became a negative one. For more information on data types and their ranges feel free to visit this Web site here and definitely bookmark this as a reference. A very common method that you use when coding in C Sharp is the two string method. There's so many different types that you're able to convert into a string if needed. So I wanted to go ahead and demonstrate a few. So let's comment out cast it and double's and we'll create a separate method called convert to string. Now let's say I had an integer that was a numerical value of 12 if I wanted to write this out to the console and have it written out as if it was a string I could simply press period. And then I have this two string method that I can call and whenever we call this just make sure that you indicate the opening and closing parentheses. Now the same applies to a boolean. I can have a boolean with the value of true and then also call the two string method on the Boolean type. This also applies to date time or just a general object. And if we were to hit Control 5 to run we'll see what the output is and how it writes it out. Twell true. There's the date time and the object itself. It just indicates a system that objects which is just a very general way of writing out the type. Continuing our discussion with conversions on data types. I want to go ahead and show you how we can convert some numbers and dates. So let's calm it out. Convert to strain. I will collapse. This converts a string of method by adding a minus sign on the left hand side here and do the same for cast and doubles. What we now want to do is create a method call parsed to numbers and dates and the first thing I'd like to show is how we can have an integer and if we wanted to give it a value of a number that we somehow originally had as a string. We can parse it. So for example ant has a method call Parr's that we can use and within it we can pass in whatever string variable that has a number. So let's say it was 27. Now it will change that string into an integer. So this could have been a string x that had the value of 27 like this. And we could replace it and we could just have X as such but just for simplicity let's keep this 27. And likewise what I'd like to show is that there is a type called a date time which also has a parser property. So if I have my birthday as the day time I can pass in a specific date and it will parse it into an official day time type so that I can have a few lines to write out to the council. I was born and it will specify the age and then it will write out the birthday twice but the second time around it formats it differently. So when we run we can see the first time the date is formatted with the time and using numbers 7 slash 4 1980. But the second time it has the day and writes out July 4th 1980. So this is cool. Let me put this out. And paste in a few lines of code here. The first which was already commented by default is just to show you that if we tried to parse ABC as an integer that's going to throw an error. Let's go ahead and take a look at that. Real quick and you could see by the error it says input string was not in a correct format because it was expecting a number that it could be converted into an integer. Now I'll get rid of that and with my remaining code I will uncomment that by hitting this button up here to uncomment. And what's nice is that when we take input from a console such as online 27 Here it comes in as a string. And so this becomes useful to be able to convert that string into an integer by having something like on line 28 where we can parse that input and converts it into an integer with the variable name count. So here I have a condition that if it successfully parses it will write this out with the number that we put in. And if it doesn't if I put in some unexpected type then it will drop into the else condition and say I could not parse this. So let's go ahead and try this up. How many eggs are there. SD Yes. I couldn't parse it. Let's try it one more time. How many eggs. Five. There are five eggs. And that works just as expected.

