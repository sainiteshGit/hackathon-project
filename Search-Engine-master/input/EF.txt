Let's not turn our attention to working with any framework core so we just saw a brief view of the North Wind database as part of a relational database management system. And we also saw a bit of the well code that created the database. Let's take a peek at that again writing sequel code can become very cumbersome extremely complicated depending on what your needs are. If you're new to as well as I scroll through this this might seem somewhat complicated. And actually this code right here is not even that advance right here what we're seeing is a bunch of select statements with a few conditions and as we go down now we're creating a table and we're mentioning the columns that need to be created with that along with the data types. This believe it or not is actually fairly straightforward but it does get complicated. And this is where Or it can become very useful or ambs are object relational mapping frameworks and what an Aurum does is that it generates objects that virtually map to tables in a database. Then you as a programmer would use these objects to interact with the database. So there can be a method to insert update or delete an object like a user or a student into a table. Essentially it's to facilitate manipulating complex database requests so short. It's a tool that translates between the object oriented programming world used by C-Sharp and the relational world used by RDBMS as relational database management systems. And ultimately it helps us to avoid using Escal in our C-Sharp code. There are several or ambs on the market and Microsoft's or M is called an empty framework and there's two main versions there's entity framework which has been around for a while and it's very mature and stable and there's a lightweight version that is cross platform called entity framework core and Microsoft specifically named it that way. To have to think of it the same way that you think of Dattner core that it's like wait and it's cross-platform. So let's go ahead and set up entity framework. Now the first thing that I did is I went ahead and created a dot net core console project and it's called E-F core what we need to do now is go to the dependencies click on there and right click and choose manage to get packages. We're going to install the framework by using new get. Now let's move on over to browse on the upper left hand corner and click there and within here we're going to go ahead and type in Microsoft and framework core as Cuil server. And when we do we get these two options and we want the first one. So let's go ahead and click on that and on the right hand side you'll see that the version says this is the latest available. This is the latest stable version. If you ever need to see if you already have it installed you can come over here and see what packages you've already installed in the past or if there's any updates you can click on this tab here also. But for now let's go to browse and we're going to go back and select our first option and on the right hand side we will choose install towards the bottom you could see some work as being done restoring packages and then we get this window here for the license that we need to access. So let's go ahead and do that and once you see this green arrow here you know that it's installed. If you wanted to double check on that you can look under the install tab and see the Microsoft the formwork mentioned here. Now there's one other window that might pop up on your end that did not happen for me because I've installed this before in the past but if you get a window like this just go ahead and click OK. And that is it. And when the framework is set up and we are ready to go. So we talked about an object relational mappers and the key word objects. I want you to keep that in mind because and are essentially uses objects when it's communicating with a database. And the way that it does that is by using models that we created and these models are essentially just classes with the properties and code that's needed to represent what the database looks like. If core uses a combination of conventions annotation attributes and fluent API statements to build a model at runtime so that any actions performed on the classes can later be automatically translated into actions performed on the actual database. Let's look at conventions first. The code that we will write we use conventions such as the names of the columns are assumed to match the names of properties in the class. For example product the. Another is the string dot net type is assumed to be an end of our car type in the database. The int dot net type is assumed to be an int type in the database a property that is named ID or the name of the class with ID as the suffix is assumed to be a primary key and primary keys uniquely identify each record in a database. Now let's look at any framework score of annotation attributes. Conventions often aren't enough to completely map the classes to the database objects. A simple way of adding more smarts to your model is to apply annotation attributes for example in the database. The maximum length of a product name is 40 and the value cannot be No that is empty well in a product class we could apply attributes to specify this such as in the first block of code here. Where you see required and string length now when there isn't an obvious map between dot net types and a database type an attribute can be used for example in the database the column type of unit price for the products table is money or dot net doesn't have a money type so it should use decimal instead. Just like we see here in the second block of code in the category table the description column can be longer than the 8000 characters that can be stored in an end var car variable. So it needs to be mapped in dot net to end text instead. As we see here in the third block of code. And lastly let's address the frameworks core for the one API a model can also be defined using the fluent API. It could be used instead of attributes or in addition to them for example looking at the first block of code. We see two attributes from the product class required and string length but those could be deleted and replaced with this fluent API that we see here. And the second block of code and that comes right from one of the classes you'll be provided. That's called Northwind. Why don't we go ahead and turn our attention to Visual Studio and what we're going to do is have you set up so that you can complete some activities. Now let's go ahead and turn our attention to a visual studio where I will be showing you three different classes that you can use to get you started. One called North when another call category and the last one a product. Once you have those you'll be able to move forward to complete some activities using the frame or core. OK so to get you started we're going to go ahead and copy some files onto your E-F core project and in the root of your less than 5 folder you should see a folder called class files that begins with an underscore. And go ahead and select product category. And Northwind copy those. And then on your IF core project just right click and paste. And now once you navigate to your program file you should be ready to start your activities.

