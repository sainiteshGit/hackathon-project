Earlier in the course we covered what Dot Net is. Well it's time now to focus on SPDR And that core where it fits in and what it means to have a P-doc core compared to what we've had before in the past which was just Espey dot net classic ASAP dot net was used for web development and until recently HSP dot net has been built on top of a large assembly and the Dot Net Framework named system dot web d l. Now over the years this assembly has accumulated a lot of features and many of which are not suitable for modern cross-platform development. But now SPDR net core on the other hand is a major redesign of SPDR net. It removes the dependency on this system where the flow and it's composed of modular lightweight packages just like the rest of Dattner core. So as a result you can develop and run Espey dot net core applications cross platform not only on just windows but Mac OS Linux and other operating systems but also important is that it's open source so that the developer community can contribute to its evolution. So anyone can go straight to get hub and keep in touch with the latest developments with HP and contribute to it. In fact you can just go and navigate this Web site right here and learn a bit more about what's going on in the community and how people are contributing to esprit de corps. So on the topic of web development let's step back and review what that entails. When building web applications a developer needs to know more than just C-Sharp and Dattner core on the client side that is on the web browser you will use a combination of the following three languages. ASTM L5 CSSA three in javascript. Each team of five is used for the content and structure of the web page. That is the material of the web page that you're consuming when you're reading it. CSSA 3 is used for the styling applied to the elements on the web page. So how the content is laid out the presentation of the content that responsibility belongs to CSSA 3. And then there's javascript which is primarily used for Inter activity and that can be validation that can be animation and all sorts of functionalities that javascript brings to the table which makes the web site itself very powerful and secure. And in fact of these three javascript is probably the most prominent and in fact it really is essentially one of the most popular languages in the world. There are many many third party components that are built with javascript and they refer to as libraries or just javascript libraries. So the better that you are familiar with Javascript the more likely that your learning curve will be small when you're using these tools that were built with javascript and there are a lot of them as a matter of fact angular is a very popular wanderer's. Jay Querrey there is go there's bootstrap. In fact there's so many there's even a component to handle managing the installation and removal of these components. And those are package managers are and what you have here on the bottom right hand corner Bouwer that is a package manager. This was all the result of the open source community that is a very busy culture which produces components to allow developers to create performance web application. And the important thing to take away is that Microsoft is now on board with the open source endeavors. So let's step back a little bit further and just ask ourselves How does the Internet work specifically focusing on a TTP. Now I want to bring this up because this can be an interview questions which has happened to me before. So it's nothing to ignore. Even though the topic might not come up during a daily discussion at work I won't spend too much time on it. But just understand that to communicate with a web server a client makes a call over the network using a TTP which stands for hypertext transfer protocol and HTP is the technical underpinning of the web. So when we talk about applications or web services we are referring to technologies that use HTP to communicate between a client often a browser and a server. So what do I mean when I say a client makes calls over the network using HTP. Well that Kli makes an age TTP request for a resource like a page and it's identified by U R L which stands for a uniform resource locator and the server sends back an and CTP response and we can actually use Google Chrome and other browsers to record requests and responses to see them. Let's jump in to an example of recording a request in response. I want to go ahead and demonstrate how to record HTP requests and responses. So what we're going to do is use Chrome and if you don't have it just do a quick Google search to download chrome and you can install it by clicking on the go to download link as I just did here. Now I assume that you do have it and install that. And at this point what I want to show you is the developer tools that Chromes has a built in and you do that by hitting F 12 and and when this paint pops up make sure that you have the Network tab selected. And at this point it is ready to start recording all types of traffic that comes in. If I go up here and Touran espie dot net and specifically you can see I pasted in the whole you are l and you know what let me just go ahead and not even do that because I want to show you what happens. I'm going to type in just a SPDR net. It still gets me to where I want to go and here on the right hand side we see all the traffic that it kept track of the first two records doesn't show any data if I click on it as P-doc net says it's an internal redirect does not have the specific information that I won. I go to the second and it says that it was moved permanently This is a status code. If you've ever entered a bad you are out I got that 404 message. That is the status code that the server returns and it gets there from here. Now that's a third record here. It actually found the web site and now the status code is 200 which means OK when you get familiar with all the different status codes. And what the response headers and requests errors are for this becomes useful in debugging. And this is really useful for people to do front and development that are working on javascript and the front side the front end of the browser not so much the back end. And these developer tools offer a lot of different functionalities. There's a console where you can enter in certain commands. It also has its own form of Intellisense kind of like Visual Studio does all go too much into this because that's beyond the scope of my discussion. But I just want to show you and introduce you to the tools that are available so you could go here and play around with it when you get the chance. But in the last slide we're talking about requests at least wanted to show you where you can track requests and responses. And that is through this network tab here within the developer tools. And specifically when I mentioned we look for certain resources well over here under request headers except this tells you the type of resources there are that the client will understand Tex HCM documents ex ACM documents and so forth. And to close out the developer to just head well one more time so we use the term MVC and I want to clarify exactly what that is. I mentioned earlier that it stood for a model view controller but I also want to mention now that it is a design pattern and design patterns are used to make coding and testing easier among many developers so that there's no chaos in the different ways people program. There's a certain structure to it. In fact there are many design patterns and MVC is just among one of them and one of the most popular in fact now the main purpose of MVC is that it isolates the application logic for the user from input and presentation. And when I say presentation I'm referring to the user interface and what that does is that it facilitates development and testing and maintenance. So in short there's code that represents a backend. There's code that represents the front end and there's code that does work to communicate between them and that's what really boils down to there is the controller and that receives input and initiate a response by making calls on a model objects. It's a target for some external stimulus. So usually that's like an h t t p request when you're typing in a URL and a web browser. And from there we move on to the model and the model is used to manage information and notify observers when that information changes. It's the model for example that can communicate with the database make updates and changes. And then after that we move on to the view and the view renders all the model information into the user interface for the user to see. So if we take this image for example the user is at the bottom and if the user sends in an HTP request they type in a u r l and the browser that is the external stimulus that the controller will pick up and the controller does the work to communicate with the model and then the model will update whatever information to the database that it needs to and take the results and update the view. So if we for example save a record the updated view can then be the record was saved leaving a message like that for a very simple example. And that is what the user will see. Let's go ahead and turn our attention now to Visual Studio and actually create and spit out NET application. OK so let's go ahead and create an ASP. NET core project with Visual Studio and to get started. Let's go to the topic. A under less than seven and add a new project and we go to make sure that we choose web. You might have visual C-Sharp selected from previous exercises but let's definitely choose web and then select Espey dot net core web application. I'll go ahead and navigate to the right location. And we will call this simply web app. Now you'll get another dialog window and the template we want to choose is web application. Now let's go ahead and select Change Arthel occasion and select individual user accounts and click OK and make sure that you have an able doctor support unchecked. So I'm leaving this as it is and click OK. So after a few seconds your solution explorer should look similar to mine with several folders and a few files within the web app project that won't go too deep into each and every one of these right now because we want to stay high level but similar to our previous projects. There's a section for dependencies where we could see those associations with no good for third party applications if we could add in. And there's an SDK here but right below there's the project's properties which when we click on it we can see some properties that get listed in our properties window. And for more detailed information within there there's a lot setting Jason files where you can see that you're able to configure some settings specific to our web server I guess express but let's come out of here and focus on a few key areas specifically the data folder contains C-Sharp classes to perform initial database operations known as migrations and that's used to create the tables required to store users and roles for the authentication system. Using migrations essentially just helps you keep snapshots of where the database is through code that can ultimately interact with the database. Now right above that is our control this folder and that's where the code for the controllers are going to be added now our pages essentially has our views. And you can see there's several of them here. One for an about one for a contact an error page. And then there can also be a folder for a model. So something important I want to point out is the location of a controller model folder and a view folder. Those really don't affect the performance but it's nice to have them in a uniform fashion. And this is the fault structure that the project has been set up with and based on what we chose and I say this to not be taken off guard by the fact that you don't see Amato's folder right off the bat. We're going to go ahead and move forward and continue developing and you're going to eventually see how everything starts falling into place. Right now I'll just go ahead and build this to get rid of these red lines here. And now they're gone. So I don't want to get bogged down with some of the details such as like what's inside services or extensions. Right now I want to stay focused on model views and controllers and that's what we're going to be touching on as we move forward. So let's go ahead and set this as the start a project just to see what this is actually looking like when we execute it. And I will go to hit the green button to execute the application on the upper left hand side you can see the spinning symbol right here so it's still working. And here we go. This is the default application and that there their core application and you can actually use this to play around and get familiar with how it's set up. But I wanted to go ahead and run this once so you can see what it is that we just went ahead and created using a template that came with Visual Studio. Coming up next we are going to simplify the name of our default database which is going to be an extremely long name so we're going to make that shorter and we are going to register with this default site. Our account so the application that we set up so far when it saves information to the database that saves it to a database with an extremely long name. And we want to go ahead and change that. I mean go ahead and show you where to look if you look in your solution explore under the root of the project. We have an app settings file and and here are 9:3 for default connection. You can see that we have our database here and this long name here is going to be what it's called. And we want to change to something a little bit simpler so why don't we go ahead and rename it to my database and we can go ahead and save that. So the next thing we're going to do is perform a database migration. So in order to do that we're going to want to go to the command prompt where the root of the project is located. So to get a location here where we can do is right click on web app and then choose open folder and file explorer and at the very top here we can go ahead and put our cursor there to get focus on it and copy the path. And I just hit Control C to copy next and we want to do is go to our start menu and type in developer or at least start typing that word. And by time you get to the letter L you should probably see this developer a command prompt. So what we want to do is now right click and run as administrator if prompted do you want to allow this app to make changes to your device. Choose yes. And then we want to just change into the directory that we've copied. So Type in CD control VI and enter next to perform the migration. Let's go ahead and type in dot net E-F database and hit enter so any framework will get some work done in the back end. And once this is done we can go onto our web application and register. And that's what we're going to do now. OK it looks like a finish. I'm a go ahead and close this out. I will run web app. And at this point I can go ahead and register. So let's go and click register and put in a dummy email Well you can pick your real email if you want. I'm putting in a fake one. Fake e-mail G-mail dot com. So I suggest not sending any messages to that e-mail next. Just put in a password and it has to have numbers letters and special characters. At least one special character like the at sign. All right. And it looks like it's saved that OK. So now what we want to do is actually connect to the database. And if you are record that was just added or use a record. So that's up next. OK everyone so we are ready to you the registration process and make sure that that went ok by checking to see the record the user record that was saved in the database. And then essentially just check that often a case in process to make sure that that works. So to get started. Let's go ahead and create a connection to that database by going to server explore and choosing connect to database. And by the way if server Explorer is not there you can always type in server Explorer and the quicklaunch and it will show up with the path that you need. And just click on it and it will appear so connected database I would choose Microsoft sequel server and for the server name I'm going to type in local be in parentheses backslash m s s Cuno local D-B. Make sure the spelling is correct. That looks right. And now we can go and select our database. And if you recall the name database was my database. And there it is. Make sure it's ok. Succeeded. That's good. And now we can click OK. So now let's go to view our database under data connections. We can drop down this desktop menu and we'll go into tables. And specifically we're going to look for the speed net users table which is right over here. And what we can do is right click and choose a show table data and there we go. We see our record that we created when we registered fake email. So we know that's saved. OK. And we're good last thing I'd like to do is run the application one more time webapp and we're going to try to logon to make sure that we can get in without any problem. And log in and boom works perfectly. And you can see at the very top right. Hello. Fake e-mail. So the authentication process worked without an issue.

