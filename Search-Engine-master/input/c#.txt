OK so we are now ready to start exploring some of the basics of the C sharp language as I explained parts of the C-sharp language. I want to compare it to the language that we're speaking now English and remembering these comparisons I believe will help make it easier to view C-Sharp as a language rather than just some random syntax examples we'll be comparing statements nouns verbs in English versus C sharp. Nothing too deep like past participles or pronouns though the grammar of C-Sharp primarily includes statements blocks and comments. Let's look at statements in English. We indicate the end of a sentence with a period a sentence can be composed of multiple words and phrases now in C Sharp there is somewhat of that flexibility also. But we want to think in terms of the ending. C-Sharp indicates the end of a statement with a semi-colon. That's the major difference that I'd like to point out there. Now moving on to blocks in English we indicate a paragraph by starting a new line and that's how you can consider a block when we're thinking of it in terms of C sharp. Consider it a paragraph in C Sharp. The difference though in C Sharp It indicates the beginning and ending of a block with curly brackets. Now while there's the use of the curly brackets a block starts in general with a declaration to indicate what is defining. For example it could define a namespace a class a method or a statement next are comments. You could think of comments as being the equivalent of a footnote. A comment is just for information to clarify what's going on in the code and actually if you write code well and have your variables and methods name appropriately you should have very little need for comments because it should be clear what's going on in the code to whoever is reading it. Let's go ahead and write some code to demonstrate what we're talking about. OK so now I am ready to create a new project. But if you haven't done so all we need to do is unhide our folders that we had before. I currently have listened to showing and none of the others so I hid the others but to unhide them you just simply right click on the solution and go to unhide folders and then you'll see all the other folders reappear and just hide the ones you don't want. Or you could choose to leave them there. So now let's just go to the begin folder and under topic A we can right click and add and we are going to create a new project the type of project is a console application and make sure that we choose dot net core on the left hand side here. Which is under visual C-sharp. I will call this basics and now we want to navigate to the appropriate folder which is under lesson to begin topic. A. Now sometimes when you first create the project Visual Studio might not detect the code the way that it should. And what we need to do is use bill to get rid of these errors that we see here perfect. So now just go ahead and write some simple code and then diagnose what we're writing. The first thing I'm going to do is create a method called write statement. I will type in write statement and what I'm doing is going to use a shortcut in order to just generate the method. So if I just write out the name of a method like this and then right click and go to quick actions will give us an option to generate the method. So I'll do that. And there you go. Now it shows us a very method stub that we can use and populate. So one of the things that we talked about was a comet. Let's go ahead and write a comment on what this is going to do. This method will write a statement. Now I'm just demonstrating this just to show you how to write a comment in a couple of different ways. But like I said when you have the name of the method done well you really don't need a comment because this is kind of like redundant right now. Now you can use these double slashes to write a comic but if you wanted to write a longer comment you can also do this. Use slash star and then close it with another slash and a star. Except in reverse. You have the star for this or more accurately Astras. And if I started typing something right here this method will write a statement and I want it to continue. I can just hit enter and automatically put in an asterisk and I can finish off my sentence that will impress you so our method is called right statement. It's describing an action you always want to have your methods made where is describing exactly what it's doing. And that's why we compare it to a verb. Now within here let's go ahead and put in some variables. Right. One is called first name and assign it a value of Jain's and then we'll do the same for last name Bon what you might have guessed and next will put down a variable called full name and concatenate these two trust name plus a space and last name and then we will write it out to the consul. My name is full name which should be James Bond. So if we're looking at let's just say line and 19 in this state in here full name is a variable and first name a last name is an expression and all of these within the curly brackets are statements and this whole section here can be considered a block and those are the things we talked about. We talked about our blocks our statements and then our comments and to run this program all we need to do is set basics as the start a project by right clicking on it and choosing set as start a project and I will hold the control key down and hit F5 to run without looking to see the results. And there you go. Now let's get a little bit more specific and talk about vocabulary. That's up next. OK so let's talk about vocabulary. Now I briefly referenced this earlier referring to methods as verbs but let's talk about that more in English verbs are action words and C sharp action words can be thought of as methods. So in other words verbs are methods. In fact the definition of method is it's a block of code statements leading to actions. The thing to keep in mind is that the version of the method that we call may vary because of the different actions that are possible. For example when we were using the right line method to write out something to the console that behavior can change depending on the parameters that are passed in. And that process is called overloading. Let's go ahead and take a look at some code as an example. Now I'm going to go ahead and comment out the right statement that we had before and right below here I will comment and demonstration for overloading. And just to save time I will paste some code that demonstrates this. And you can go ahead and pause the video and type this in but essentially what we have here is several methods and they all have the same name. And because they have the same name. This is a perfect example of overloading. They have the same name. Yet their signature is different. If we did not have different signatures the compiler would complain on line 13 we do not pass any parameters on line 17 we are passing one parameter on line 21 we are passing two. So if I were to go to line 10 and call this method say something and I will pass then just one parameter Mrs. Ray which one of these will it call it will call the one where it matches the signature which is for one parameter and right cheers and passen the variable that is passed in and let's take a look closely at the syntax here because I haven't shown you this before what this is doing is using C-Sharp feature called string interpretation and what it does is it allows you to put in the variable name within a string. And the way that this is able to work is because we have this dollar sign to indicate hey we are going to possibly use some string interpellation. So look out for words within curly brackets that are matching variable names and that's what this is doing. If we took out the curly brackets It would think it's part of the string and it will not work. So it's a nice little feature and it's a shortcut but just want to take a moment to explain that. So let's go ahead and save and run this program and see what comes up. Chares comma ray which is exactly what we expected. Cheers Khama. And then the variable that was passed and did not print out any last name that wasn't set and it did not say. I don't even know your name. So we talked about verbs but now what about nouns. Well in C Sharp you can think of nouns as variables Fields properties and types. In English nouns are names that refer to things. So for example fito is a name of a dog. The word dog tells us the type of thing that fito is. So to order fito to fetch a ball we would use his name now and see sharp their equivalents are variable's properties fields and types. So let's break those down by now you should be familiar with variables which is essentially just a place to store data like numbers strings and other types of field in C Sharp is a member of a class or an object. And we'll talk about that in a moment. Propertys is a member of that provides a flexibility mechanism to read write or compute the data in a field. And type as the name implies describes data types. It stores type information in a variable field or property. So the type class represents the program's metadata which has a description of its structure but not the instructions that are executed. In layman's terms it basically describes with something is. So for a brief recap verbs are methods. Nouns are variables fields properties and type in C Sharp. We have reserved and contextual keywords reserved words or words that the compiler recognizes for a specific purpose and you can't just use them any way that you want. Some of the predefined reserved words that you might run into during this lesson include using namespace class static and string. Double bool var. There's quite a few of them. There's also contextual keywords which have a special meaning in a specific context. Now there are about 25 contextual key words that only have special meetings in that specific context that they're used. So some examples are ad async away. These might be unfamiliar to you right now but the more you code the more it is you learn to recognize which are the contextual ones versus the reserved keywords. If we're to flip to our program that we just wrote Now it should start to make sense. Which are other keywords because they are highlighted in blue or specific colors associated with them and they can be customized You can go into Visual Studio and change them but most people tend to leave them as a default. But it's nice to know that Visual Studio gives you that flexibility. Never underestimate the power of Visual Studio. There's a lot of flexibility there to provide to fix issues that will save you time such as for example if we look on the right hand side. I actually just notice something I'd like to fix before we move on is the basics project that I created really should be under topic A in the begin folder for Visual Studio. I will just drag it and bring it up here and boom that's taken care of. So once you become familiar with different reserve and contextual keywords methods variables Fields properties and types. What do we do with all of this. When we code we use all of this to ultimately create classes and objects. Now these are big topics but I'll give you the short definition for now. The class is essentially a construct that enables you to create your own custom type by grouping together fireballs of other types methods and events. Essentially it serves as a blueprint for an object and that's exactly what an object is. An object is what we refer to as an instance of a class. And technically speaking it's basically a block of memory that has been allocated and configured according to the class blueprint. But if you ever ask in an interview what an object is the quick answer would be an instance of a class. So for example in the image that we have here before we could create any type of cars you would want to create the blueprint of it and that would be the class. Once you have that you can create car objects by instantiating the class and then you can have different versions of it. Each of them can be customized in their own different way as you see here with the green Ford Mustang the red Toyota Prius and the blue Volkswagen. Now that we've talked about classes I want to move on to discussing name spaces because what happens when we're building a huge application and we have lots of classes that we've built. There has to be a way of organizing it such that if you happen to have two classes of a similar name that they don't conflict with each other. And that's where name spaces come into play. Names faces such as what you see here on line three which in this case is basics a namespace has two purposes. The dot net framework uses name spaces to organize many of its types. So for example on 9:16 where you see Konsole dot right line well system is a namespace and console is a class within that namespace. And the reason why we don't need to specify system right now on line 16 is because we indicated at the very beginning online one that we're using a system and we did that with the using keyword. Now there's a second purpose for namespace. And that's so that we can create our own. So for example I can come down to the bottom here and non-live thirty nine I can create my own namespace called person. And actually I'll just go ahead and paste this in to save some time but within person I'll have my own class called female with a property called name. And so now the only way to access the class female with the exception of using It's a fully qualified name like actually writing person dot female if you import the namespace person. I can create an instance of the class of a female after I import the namespace so I'll type in female equals female and the compiler won't recognize it because I have not imported. So I can just go to the top and type in using person. And now you could see it recognize it a shortcut instead of just typing in using person is to simply put the cursor on a female. And if I hold the control key down and hit period Intellisense will give me the option to select using person. And it does it automatically for me. And now I can go ahead and finish writing some code such as writing out the name of a female after assigning it. So let me go ahead and assign it a value of Sindhi for the name and then we will write it out to the consul. And now I can go ahead and save this and I'll comment out line 12 which is from our previous work. And hold the control key down. Hit F5 to run without debugging to see or output. And there we go. Her name is Cindy.

