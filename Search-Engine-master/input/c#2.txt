Let's turn our attention now to variables. By now you should know that variables are used to store data. As you can see in this piece of code here. The first line with double the second line uses camel case this code block shows an example of declaring and initializing a local variable by assigning a value to it. Note that you can output the name of a valuable using a key word specifically called name of. So for example in the output you see it says the variable height in meters. Well the term height in meters is the name of that variable double. And this is a nice easy way to reference the variable name because if you ever need to go change it it doesn't become a hassle it's a lot easier because you can simply use the refactoring feature in Visual Studio. The other thing I'd like to note and this piece of code is the last two lines. That's actually one statement but it's concatenated using the plus sign and you can do that by making sure to use the dollar sign and open the quotes again and continue with this string statement. Now let's focus for a moment on number of variables numbers are data that we may want to perform an arithmetic calculation on. For example multiplying they can be natural numbers such as 42 used for counting and these fall under whole numbers or they can also be negative numbers such as negative 42. These fall under integers. Or they can just be real numbers such as 3.9 with a fractional part and these fall under single or double precision floating point numbers in computing. When working with numbers you can insert an underscore anywhere in number literal including decimal binary or hexadecimal notation to improve legibility. So for example you could write the value of two million in decimal notation as a base 10 to underscore 0 0 0 underscore 0 0 0 to use binary notation based to use only ones and zeros and start with the number literal with zero b and to use hexadecimal notation. Base 16. Use 0 2 9 and a to F and start the number literal with zero x as shown in this code here now all we're dealing with real numbers know that computers cannot always exactly represent floating point numbers. The float and double types store real numbers using single and double precision floating points. The following table shows how a computer stores the number twelve point seventy five and note that the 1 bits and pay attention to the 1 bits and 8 for half and quarter columns. And as a result eight plus four plus a half plus a quarter equals 12 and three quarters. So twelve point seventy five in decimal is 0 0 0 0 1 1 0 0 point 11 0 0 in binary booleans can only contain one of the two values. True or false as shown in this code snippet. And they're most commonly used to branch or loop in code. Now let's go ahead and start writing some code just to make some comparisons between different types. When you're programming there's going to be time that you're going to need to write some form of calculation and you want to make sure that the types for numbers that you use behave the way that you expect them to. So I want to go ahead and compare integers doubles and decimals three very common types that you're bound to use at some point in your career to make sure that you understand what their ranges are. So let's go ahead and create a small project under the topic B folder. Make sure it's dot net core we'll call it numbers and save it in the appropriate folder. So start off by just creating the title of the method that I want and I'll call it exploring numbers. And by right clicking and choosing refactor we can choose to generate a method stub and there we have the area that we want to write our code. So here I will paste and the first line of code which will indicate the range of an integer an integer is a variable that uses 4 bytes of memory. It can store positive or negative numbers up to about 2 billion. And here I just simply write out to the council what the range of an integer is by indicating size of and mentioning the type. So it'll write out. It uses the actual size bytes and can store numbers in the range of. And then there's 2 new line characters. So it will write on a next line the minimum value to the maximum value. And all of this and zero here is right after the colon is a formatting method to add commas when the numbers are written out. And now we will do the same for a double. And what you say here on line 17 where we just have all these dashes. That's just to make the output in a more uniform manner and it's easier to read. So a double is a variable that uses 8 bytes of memory and can store much bigger values. And that's what I'm going to put out here. So now for the last numbers that we're going to write some content on is for decimal and a decimal is variable that uses 16 bytes of memory and can store some big numbers but not as big as a double. So now after saving if I go ahead and run this by hitting control of 5 actually before I do that can you make sure that I set numbers as the start of project and then hit Control 5. We have our output. It uses 4 bytes and can store numbers in the range. And here's the number right here. And then the double uses 8 bytes and can store numbers in this range. All right here with all these zeros. And then lastly the content for decimal. And with this you can see the different ranges so you need to be able to understand what these ranges are because if you're going to be calculating a value that needs to have really high accuracy you'll want to use a double versus an it otherwise you're going to get the wrong values. There are many different types and variables in the C-sharp language. And this is a good web page to come and visit see all the different types available and become familiar with them. Now sometimes you might not remember exactly the syntax for a particular type and that's where the keyword bar comes in. It's not specifically for that reason but it is good practice to use it. In other words it's just shorthand for a normal type declaration. So instead of typing ant or ball or string you can just type in var and the compiler will figure out what type it is. Now some developers prefer not to do that because they feel that it's easier to read the code and just know right off the bat exactly what type it is. But it's really a subjective opinion. Now there are appropriate and inappropriate ways of using Vire though for example here on the first three lines this is a good way of using the bar key word because we're instantiating an X-amount document and the compiler can infer that. So there's really no need to write X-amount document X X-amount two equals new. SML document. However when the data type is unknown like on the next example for file one you don't want to use Vought because we don't know exactly what the data type is for file 1. And if we know that it's going to be stream writer it's better to explicitly write stream writer and continuing our discussion with the VAR keyword. I want to go ahead and do a quick demonstration. Let's go ahead and open up our numbers project. I'm going to paste in a short method with some code in it. And you can pause the video and type it in yourself. And the method name here is assign local variables I'll jump onto the main method and put in a name for it. We're not going to be writing out to the council. I'll leave that up to you if you want to do it. All right now the most important thing I want to point out is to notice the different types that we're using. So we have an int a double a decimal a string a char and a boolean all of these are perfect candidates to use the VAR keyword. So we can't simply come over here and use var for every single one of them. For these type of variables the compiler infers them perfectly. Now one thing I'd like to quickly point out is that these are local variables these local variables are accessible only within this assign local variables method. Once this method has been executed we no longer have access to these local variables. So for example over here I can refer to the happy variable and there's no issue there. However if I were to go to another method and do the same thing the compiler will complain. You'll see a squiggly red line because we don't have access to the happy variable. It is not accessible from the Messa exploring numbers. It is only accessible within a size local variables. It is possible to have global variables where multiple methods have access to it such as. If I type in and another price equals 110 above assign local variables there'll be no issue. But most likely you'll be using properties which is a separate topic and that's it for the VAR keyword. When you need to store multiple values of the same type you can declare an array. For example you might need to store four names in a string array. Let's go ahead and demonstrate that in our numbers project. I'll go ahead and create a method call store multiple values in an array use a light bulb to generate a method stub. So we're going to go ahead and store four names in an array but the first thing that we're going to want to do is declare the size of the array. And the type of the array is going to be a string. And we do that by indicating string followed by an opening and closing bracket followed by the name. So whenever you see a string and opening closing bracket followed by a name a variable name that you know is an array. So I can continue writing equals new string opening and closing a bracket and specifying the size of 4. Next thing we'll do is to store the items in the array so online you're 19 now. Write down a quick comment. Store items specifically we want to do this at the index position and in C-sharp the way we do this. As you can see on line 20 out all right names. Open and close the bracket and put in zero to indicate the index. And I follow that with an equals Kate in quotes an end the statement and a semi-colon. Now we'll do this three more times. Go ahead and copy and paste. I'll change each of these positions. Along with the names Jack Rebecca and Tom and now all we want to do is iterate through the array and write it out to the council. So online 25 start a for loop. We'll be talking about four loops more later on to do a short cut to write out this for loop. I could simply just type in for our hit the tab key and now indicate where the starting point is which is zero. And then we're going to specify the length of the array and we do that by writing names period and then accessing the length property and then that plus plus is just to increment. And now we can simply 9:27 right out to the console console. That right line for each item of the array right out the name and indicate and within the bracketed letter I. So as a result I'll write down a little commet what we are doing is reading that item of that particular index. So I'll go ahead and save this and comment out the other method. We don't want to run out on line 9 and 10 or we want to run. Is store multiple values. And array. Let's go ahead and hit control f 5 and see the output. And there we go.

