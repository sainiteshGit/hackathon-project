So we've covered quite a bit so far about what content that we can carry to define a class. But now I want to turn our attention to two major concepts that are extremely important. One is understanding what an interface is and the other is inheritance specifically with classes Let's start off with interfaces. Now an interface contains definitions for group or related functionalities that a class can implement and by using interfaces you can for example include behavior from multiple sources in a class. Now it's often referred to as a contract because essentially what it does is once you create that interface you can essentially force other classes that implement that interface to include certain functionality. Let's go ahead and take a look at an example. All right everyone so I've gone ahead and created a project called interface demo and what I'm going to do now is create a very simple interface. This is a very big topic. However I'm going to just break it down by showing you like the very fundamental parts of it and then just get you comfortable enough to be prepared for the upcoming exercises so to create an interface. What we need to do is just simply use the keyword interface and then hit the tab key and by default Visual Studio will use the naming standard of using the letter I to start with the name of your interface and let's call this one human eye human what we're going to do is create an interface that is going to force us to implement certain properties when we create a class that implements human. So for any human we know that they generally have a first and last name. So let us add a signature for a first name essentially. This is a property so we can actually use properties and then do our next one which will be last name. That's a lot quicker then. Let's go ahead and create a property for age and let's remove Publica because a compiler is complaining about that in our interface we cannot specify public. And then let's do a method. So we're going to be requiring whatever class that implements our human to have these three properties plus implement a method called do something and that is just the method signature. So now I can go ahead and create a class called person and to implement the interface I just type in a colon and now I can put in the name of my interface I human. Now normally for big projects you don't place the interface within the same file like this. They're usually separated out into independent files the same way we do it for classes. But for simplicity I am keeping this all here. Now let's take a look to see what the compiler is complaining about here. Person does not implement interface member human. Dot first name last name age and the method do something. So we can use this line up to choose implement interface it will automatically create the content to get us going. Now we can keep this a little bit more simplified by just doing the property of the first name we really don't need all of this here. So let's go ahead just do prop straying first name and then we're going to do the same thing for last name and age. Age will be an integer. Well changes to last name and for do something we can simply just write out some concept and I'll go to the very top and add using static system cons.. And now we can actually use this. We have a person class that is implementing our human interface which forces us to use first name last name age and to implement a method called Do something. So let's go ahead and create an instance of person one person will be 46 the name is J last name sky and then we are going to write his. And then it'll write out the first name property. Which is just first name just like that one word is. And then the actual first name. Lastly what we can do is invoke the method on 1 called do something and so then it should write out no trees were hurt. So let's go ahead and save and run this. And there we go. His first name is J. No trees were hurt during the development of this program. Interfaces are very important to learn more about them. You can visit this page here as the years go by and you become more advanced you're going to realize that interfaces are constantly used especially for more advanced applications. And when you become used to implementing certain practices like design patterns you'll see how useful and how powerful they actually are. So definitely get familiar with them and it is also a very frequent question that comes up during interviews what exactly is an interface and what is it used for. So definitely just keep that in mind. Another important concept is inheritance. And let's check that out next. Similar to what the concept of inheritance as it applies to human in programming inheritance is essentially when a particular class is able to pass on its characteristics onto another class and the class that is gaining the characteristics is usually for two as a child class and the one giving the characteristics is usually referred to as the parent class or base class. And this right here is a technical definition. It enables you to create a new class that reduces extend or modifies the behavior defined in another class. Let's see how to demonstrate inheritance. I'm going to go ahead and create a student class and we're going to continue using our interface demo project and you'll see why in a few minutes. But let's go ahead and create a class called student and this student is going to inherit from person and what's going to be unique with this student class is that it'll have a property called Student ID. So if we're to go to our main method now and try to create an instance of a student let's say we call that S1 you'll see that when we look at the properties of the instance student has all the properties of person in addition to student ID and that's inheritance in a nutshell. That's the core aspect of inheritance it took in the properties of its parent class which was a person and the child class is student. Now you might ask well a run what's the difference. Why don't we just use an interface instead of just the person itself. Well the thing is that there is a difference between the interface and a class like in the student class. What we are able to do is we can create a method that does something like this. But we cannot do that in the interface. If we were to go to the interface I human and try to actually write the method in it's going to complain. It's going to say interface members cannot have a definition and that's what it interprets a method as some type of definition. And that's not permitted. What it can have though is a signature like you see on line 42. However there is an alternative something that is almost a hybrid of a general class and an interface and that is an abstract class. So I can go over here let's say on line 23 and type in the abstract keyword in front of class and put in let's say a female this can perform similar to an interface we can have signatures in there however we can also have methods like this. So as a result what we can do is take this abstract class and say female inherits from person and student it can be inheriting from female and if we go to student one we could see again it has all the characteristics of person at age first name last name and its student ID which I've got because it implemented this abstract class female which is a child class 4 person person being its base class. So let's just back up for a second there's really just three things that we're talking about inheriting from a class such as how female is inheriting from person. And then we mentioned the concept of implementing an interface or an abstract class person online Thirty-One is implementing an interface and we are implementing an abstract class on line 18. Not so bad like to point out is that if we were to go to line 14 and try to create an instance of female let's say if one let's see what happens the compiler complains it cannot create an instance of an abstract class and that is a general rule you cannot create an instance of an abstract class. In fact you can only implement one abstract class. However with interfaces you can implement multiple Let's go ahead and take a look at some of the differences between abstract classes and interfaces. So in talking about differences between abstract classes and interfaces I was originally going to show this and our regular slide format but I actually wanted to show you exactly where I got this from. Now during my career there are plenty of questions that come up during interviews that you might know at one point and then if you don't interview for a year or two you might not remember. So I keep track of all types of questions that get brought up or information that I think that I'm going to need to know whether it's on an interview or whether it's just on the job. And this right here is from my interview work document. And as you can see on number 44 I address abstract classes and I indicate that it's similar to interfaces but it cannot be instantiated. Remember we just try to do that and the compiler complained. And they're also frequently either partially implemented or not implemented at all. And we saw how it was partially implemented because we were able to put in a method in there and that was fine. However when we tried to do that in an interface that didn't work. So I had three points three points a class can only inherit from one abstract class. And then there's a third point where I say that you can specify methods as virtual to force a derived class to create its own implementation. And that's a little bit on a side note but right above 44 I don't actually pull up the document here so you can see I had interface because they were closely related. And I had two main points there. It's like a contract which I mentioned earlier. And if a class implements an interface that interface guarantees that that class contains a specific method specified and also that it does not contain code or data. So keep this in mind and keep a document that has specific questions and answers close to your side whenever you need it whether before an interview or just if you're about to get on a project and there are certain key concepts that you need to refer to. It makes it a lot easier to just have everything in one location instead of just a series and series of bookmarks and links that you need to sift through. Let's not turn our attention to the four pillars of object oriented programming that's up on the next topic. And actually we've already addressed one of them which was inheritance. But let's address the others now.

