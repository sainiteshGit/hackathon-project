Let's move on to the topic of understanding iteration statements these type of statements repeat a block of code either while the condition is true or for each item in a collection. We've actually used one so far which was the fourth statement. There's also for each do. And while Let's take a look at the While statement the statement executes a statement or block of statements until a specified expression evaluates to false. So as you see on the diagram here to the right if a condition is true it moves right from A to B and then continues in a loop fashion. Back up to check the condition again and if it's still true it goes back to B until the condition is false. And then it will come to a complete stop. Let's move on to Visual Studio and write an example of the While statement here in Visual Studio our go to topic be understanding iteration statements and create a new console project. And as usual we'll go to the location that we need to for saving a project and this will be called iteration statements. And the first thing that I want to do is create a method stub that is called implement while statement and let's write our first and simple while statement will initialize a variable called X and assign it as 0 and our statement can be as simple as typing and while hitting the tab key and indicating our condition and what we want to test is while X is less than 10 we're going to do something and that something is going to be to write to the console the value of x and that value is going to be incremental each time it iterates through the while loop control. As for save and now was to control a 5 to run. But before we do that said iteration statements as the start of project now it's safe to do control files. And there you go 0 1 2 3 4 5 6 7 8 9 by the time it hits 10 that condition becomes false. So it does not enter this loop because 10 is not less than 10. Now there's another keyword that works in conjunction with the While loop. And that's the word do. Let's take a look at that next the do while loop is like the while statement or also sometimes called the while loop. Except that the boolean expression is checked at the bottom of the block instead of the top. Which means that it is always executed at least once. So whenever you want to have a condition similar to the While loop you know if your condition has to execute at least once that's when the do while loop becomes useful Let's see how. Let's create a method stub. Cover implement do while loop control period generator method. And what we're going to want to do is write a small program that asks us for a password and it keeps asking us for a password until we get the right one. And so let's say that the variable that we're going to start off with and assign a value to is password and we'll first set it is empty. And by the way using string. Empty is using best practices rather than just putting double quotes with nothing in it. Next I will type in do and here with intellisense I can see that there is a code snippet for the do while loop. I'll tap twice. And what I will want to check is to see that my password is not equal to secret. So whenever it's not equal to a secret it will prompt the user for the password again. So it will keep iterating within this loop here. Everything between line 17 and 19. So it will prompt the user by saying Enter password and we all want to wait for the user to enter that value in and we do that by writing console read line. So it grabs that input and it will assign it to the variable password. And if it is correct then we can come out of the loop and write correct. Good job. So it makes sense to use the do while loop here because we know for sure we want to ask the question at least once it makes sense to use a while loop where you don't even prompt the user and you're automatically just checking a value. So just go ahead and test running this are coming out. The first method that we wrote and execute and so are password. Let's say it's happy it's incorrect. So it's going to keep asking me until I get the right password. Let's say I type in secret it still says it's incorrect. That's probably because it's case sensitive so this type and secret are lowercase and there we go. Correct. Good job. I feel good hearing that. Love the validation. So now let's turn our attention to a false statement that is a for loop by using a for loop you can run a statement or block of statements repeatedly until a specified expression evaluates to false this kind of job is useful for iterating over arrays and for other applications in which you know in advance how many times you want the loop to iterate that is three major portion of your statement. There is the initialiser which is a statement that executes once at the top of the loop. There's the condition to check whether the loop should continue and an iterator that executes at the bottom of the loop. If you look at the diagram clearly you see at the top the initialization followed by the condition and the loop statements. That's actually the body of the work that's being done and where you see step. That's the iterator oftentimes that is where we increment or decrement a value which we could demonstrate next to demonstrate or for statement. Let's first comment out our last method call and we will create a method stup called implement for statement control period generate method Stubber and over here. Let's go ahead and type in for and I'll hit tab twice because I see the code snippet that's available. And now I will populate my initialiser by first naming the variable y by hitting tab. You can see that I which is in the condition was automatically changed to y. Visual Studio was smart enough to pick that up and also that applies to the iterator. You can see why. Plus plus. So for the length let's say that I want to have it as 15. And now when I hit enter it drops him right to the body and we can do something and what we'll do is write to the council the value of y. So what we should expect is to write out every value that is under 15. So we initialize it. We have our condition as long as Y is less than 15 and then we have our iterator which increments y control 5 to execute and then we go 0 through 14 exactly as we would expect for each statement. Repeats a group of statements for each element in an array or a collection. And as long as there are items in that array or collection then we move on to the next item and execute the statements that we indicate needs to get done. And then we continued so forth in the loop until there are no more items in the sequence. And then the program terminates. That's just a visual studio and take a look how. OK so we're back in Visual Studio. The first thing that I'd like to do is comment out our last method that we did implement for statement and we're going to create a new one called implement for each statement control period generate method stub. And what we're going to do is iterate through a collection of names and then write them out to the console using a for each statement. So this first line here will be our string array of names. Adam Barry and Charlie and I'll now type in for each and all I'd really need to do is just type in F or E and I see for each is highlighted by Intellisense tab twice and know what I want to do is specify my type and it will be a string. I'll tab over and we will be working with names. So for each name in our collection of names answer we will write to the council the name and its length. So this right here as you recall is writing out the variable concept the name itself. And it will indicate its length of characters by checking the length property of the name and will do this for each item so therefore it will iterate through this three times control of 5 atom has four characters. Barry has five and Charlie has seven characters. Now this is a very straightforward example but it's actually one of my most favorite and useful features and C-Sharp because there's so many times that I've had to work with several objects that need to be manipulated and just by iterating through a collection of my objects I can come here and do whatever I need to do to modify it.

