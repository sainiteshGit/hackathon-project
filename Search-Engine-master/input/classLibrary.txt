Let's start by revisiting the topic of class in order to discuss class libraries if you recall from an earlier lesson we briefly introduce classes and objects and we indicated that a class is a construct that enables you to create your own custom type by grouping together variables and other types methods and events. So essentially a class is like a blueprint and it defines the data and behavior of a type. So if you have a car class then with that we can create car objects and each of those would be unique. Well in large applications when we create classes we generally want to have them be reusable across multiple projects. And the way we do that is by putting them into what's referred to as Class A library assemblies these class libraries group types together into easily deployable units essentially dl files. And if you've ever seen files on your hard drive that end with the URL. Well that's what those are. Let's go ahead and take a look to see how to create class libraries. So to get started I went ahead and created a small app a console app just like we've been doing before called my app and I said it as a default project. So there's nothing special about this. It's exactly what we've been doing in the past. However now we're going to create a class library for a car just like we saw in our slides. So let's go ahead and add a new project and this time we will select class library choose our location as usual and let's call this my library. And now what we want to do to create our car class. Let's go ahead and rename our class here to car hit enter and Visual Studio should prompt you to whether or not you want to rename your class in your file. And I'll choose. Yes and it does public car class and now I can go ahead and save this and the next thing that I want to do is under my app I want to create a reference to this library if I'm going to use any of the classes here. And the way I do that is by right clicking on dependancies choose Add Reference and then select my project that I just created which is my library. And if you don't see these options make sure you have projects on the left hand side selected. I'll check my library and click OK. And now I'll go over to the program file on my app and I should be able to reference it. So if I went ahead and typed in car and then hit the control button and the period I'll get an option to add the namespace for my library so quick that I can see the color of car just changed and I can go ahead and type in green car he calls new car save and build and I'll quickly just fix this type of high and save again. So now we have our my library class that we just created. And our console application that references that if you've ever created a class library and for some reason you can't access your class or some method in it it might be because of your access modifier your access modifier. If we go to the car class here is this the keyword public. We have access modifiers at the class level and also on some methods and properties. Now if we for example did not have public written here and our program file the compiler would complain because it does not recognize car. And if we did not include the name space we would not have been able to add it. So if I had control period. It does not give me the option to add the namespace my library. And that's because the class needed to be public access modifiers are keywords used to specify the declared accessibility of a member or a type and more information could be found on this page here. There are several variations of access modifiers such as protected internal protected internal private and private protected and these are important to become familiar with because they do actually come up quite often on interview questions I've been asked at a few times on several interviews that I've been on but they're not too difficult. They're pretty straightforward such as protected is similar to a private modifier with the exception that it is able to be derived from child classes and that will make more sense when we talk about inheritance. There's internal which is limited to the current assembly. You can think of it as limited access to the current DSL that you might be in. There's a protected internal which is just a combination of protected and internal access is limited to the current assembly or types derived from the containing class. And there's private and private protected which you could just see here I won't have to read that. But do remember to keep note of these and have a good reference because rookie developers tend to just use public and private and limited like that but really good developers know how to use the appropriate modifiers when it is necessary. So definitely take that into consideration when you are programming and defining classes which will now talk about in a little bit more detail. Now let's talk about what makes up a class when we're creating a class where essentially doing what we can refer to as defining the class. And when we do that we are normally adding members to it. Members can be either fields methods or specialized versions of both. Now I picked out two examples for both of these cases but there are more associated with it but I don't want to go beyond the scope of this course. So for fields I chose Constance and a read only which they could both be a concept field is one that has data in the field it never changes and the read only field is one that cannot change after the class has been instantiated. Then we have methods methods can have constructors constructors enable the programmer to set the false values limit instantiation and write code is flexible and easy to read and properties. Well properties behave like fields when they're axes. However unlike Fields properties are implemented with accessors that define the statement executed. When a property is accessed or assigned Let's go ahead and take a look at this in code. So now I've gone back to the program file and we're going to go ahead and just save with the changes that we've made and add some code to write something out of the con.. You'll notice on line love. There's a compile error and the reason why is because it's expecting an argument. And that's because I specified that in the constructor a year should be passed then. So I'm going to go ahead and say that the year is 21 21 and no I will write out to the console my car is called and I will give it a name. Now a name is going to be blank right now because our property card name is set here but it's not a sign anywhere in the code of value. So let's go ahead and give our green car a car name supercool go to the next line here so we could see this easier and I'll add just a semi-colon here and say the car here is and over here there's another compile error for underscore year. So two changes that I'm going to make here. One is I will rename this variable here. By right clicking and doing rename to a capital year capital Y normally the coding standard for using underscores for a variable is if you're using a private variable and we want to make this public because that is the reason why I was complaining. It does not have access to it. So now if we go back to the program file and we change this to year it should see it you see so if I read this period we can see year is available. So I should write out my car is call right out the car name and then it should say the car year is 21:21 and that's run to see what the output is. My car is called supercool the car year is 21:21 some times of value needs to be one of a limited list of options. For example the list of seasons or days of the week where we can store this data using an enum type and enum is a very efficient way of storing one or more choices because internally it uses values in combination with a lookup table for string. Now I should note although it uses an int type that is a default and it can be changed we're going to be looking at an example of this along with another feature called object initializers object initializers let you assign values to any accessible feel or properties of an object creation time without having to manually invoke a constructor followed by lines of assignment statements. Basically it just makes life a lot simpler to define an object. For example here you see that we have a class called Cat and to create a new instance of cat we can just do that in one line by saying new cat and in curly braces specify the age and the name that's using the object initializer feature of C-Sharp which came out several years ago. That's a lot more efficient than having to write out three separate lines where we first instantiate a new instance of cat and then specify age on a separate line and then a name on a separate line. Let's switch over to Visual Studio and demonstrate in Homs an object initializers so far. Demonstration the first thing that I did is I've gone ahead and created a new console app called people the same way we've done before and now what I'm going to do is create a new class library called Paxi library within this library. We're going to want to create a Person class rename the file would like to perform Reny in this project. Yes and I will pace in my feels. So next thing is to go back to my program file and the first thing that I will do is create an instance I will instantiate an object and right now you could see it's not picking that up. And the reason why is because I do need to add a reference to it. So let me go to dependencies for people at and add a reference to my Paxi library. And of course after I add my reference I need to import the namespace and there we go. My next line I will just add it in the name of Bob Smith. And then we have a date or date of birth. And here with the fine this daytime passing in let's say 1965 12 22. So now let me jump to the top and I will drop in the line using static system dot com so and next I want to show you something in respect to formatting. What I'm going to do is write out the individual's name was born on a specific date and the date format is going to be following this. And I do not have all the date formats memorized but to keep a reference you can go to this Web site here and there are some clear examples of how you can use them and all the different format specifiers and descriptions. So for example using for these We'll write out the format similar to this here and so forth. Next I'd like to show you a demonstration of using an object initializer which we discussed earlier. In this particular case I can create another individual and indicate new person and then open and close my curly braces. And here this is where I can begin typing in as soon as I hit space. Intellisense will give me the properties that are available. And as you can see there's date of birth and name so I could choose name and type in Alice Jones. It's important that I follow it with the comma and then put in a next property. So every property is separated by commas until the very last one. So for the date of birth I'll drop an nights 98 March and you'll see that there is a difference. And the way that the format is written now because for this second individual I will write out to the console using a different format so I will write out the person's name was born out and a different date format. So I can go ahead and run this now. So we could see the results and there we go. Bob Smith was born on Wednesday the 22nd of December 1965 and ours. Jones was born on the 17th of March with a different format. I just need to add a space here after 17 and that could go right after the word on. And if I want I can also add in here on the day of. And we'll just guess the day here. Here is where I'd like to demonstrate an income for genomes or we need to do is add syntax such as some day and then curly braces the values that you want. Now over here the compiler is complaining because something that's very important is that we cannot find the in within a method that needs to be outside of the method so let's say above here and now it's not complaining. So over here for our last line we can simply add in on the day of and then indicate day period and let's just choose the first one Friday and now when we run it out Jones was born on etc etc.. On the day of Friday when you're defining your class sometimes you want to keep track of multiple items and what you can consider a collection. Luckily in C-sharp we do have various types of collections available on this page here. It gives you a nice overview of several types of collections available and one of my favorite types is the generic list now an array is a collection. This list has a couple of advantages that I really like. One is that it is typesafe so you can specify the type that you want to keep in your collection such as over here you can see there they are specifying string. So in that collection you can only add strings the other cool thing about it is that when you're adding items to the collection there's really no boundaries such as the ones that you have in an array where something can be index out of range. The list dynamically adjust itself for the amount of items that you have in it. Let's jump over to a visual studio and modify our class to use one in our Person class. If I wanted to add the ability to have a collection within the person class all I would need to do is write a public list and within the left and right arrow brackets put in the type and that would be of person. And then I would assign a variable name and we could say we want to keep track of the children and then create a new instance of it. Then all we need to do is import the namespace that the list belongs to and that is within the system collections generic namespace. So I will choose that and no the compiler no longer complains. At that point we can go over to our program if we want to populate this collection. We can simply say in the case of P1 which as you can see on line 16. As for Bob Smith. Therefore the children property we want to add a person and that person name can be sent. So we're not really doing anything else new with the exception of populating this collection here. This list that we named children. And then we can go ahead and write out to the council. How many children that Bob has. If I want it I can go ahead and copy line 29. And just repeat the process and we can change the name this time to Charles. And so now when we run the programs We'll see says Bob Smith has two children at the bottom. So this is a very quick and convenient way to use a collection when you need to. Now like I mentioned there are a few different types of collections available so you'll want to go ahead and review and see what are the benefits of each and what's most appropriate for you. For example it may be that you need something that's a little bit more in line to a dictionary and that is described down here on this page. We see mentions of different types of collections and one of them is a dictionary implementing a collection of key value pairs and also each of these such as the list that we use have various properties that are available not to mention just count feature but also to sort the collection and various other functions that you'll want to get familiar with. So take your time and look through this for me to go into every one of these will be beyond the scope of this course. It's a very good page to just bookmark I'd like to turn our attention now to the keyword static as you can see over here on this page. It says one to use the static modifier to declare a static member which belongs to the type itself rather than to a specific object and that the static modifier could be used with the class's fields methods properties etc.. So what does this exactly mean. Let's go ahead and open up our my App project specifically the program see us page. Essentially what it means is that you can use the static key word when you do not want to instantiate a class such as what we are doing here on line 11. There are times that you just want to have access directly to the properties and members in a class without having to have different instances of it. So for example let's go to the car class itself and let's create another class and we'll call this car version 2. Ok so now let me go ahead and update the constructor here so it doesn't complain. First thing is if I wanted to be able to have access to some of its members without instantiating it I can simply add in the keyword static. Now the first thing that's going to happen is that it's going to complain where it sees members that it does not have the word static associated with it. So I would need to add static over here for a year and and also I would need to remove this constructor because static classes as you could see when I hover over the car V-2 says static classes cannot have instance constructors. So let's go ahead and get rid of there. And then also add static over here for car name. Now if we go back to our program file we can essentially duplicate what we have here and we'll be using our car version too. However we no longer need to create an instance. So let's get rid of this where we are creating an instance of car and let's just change the name here to green car V-2. And if I hover over here on 9:16 you can see it says cannot declare a variable static type car v2. Well all we really want to do actually is now access its member directly. So for example the car name can now come over here and just choose car name and then assign it a value. Just like this. And at this point I can update my variable for card name over here and we got rid of the year. So let's get rid of that and just to make sure we're not writing an extra card to the console that we don't need to see right now that's coming out our initial code and I'll go ahead and save this and run my car it is called supercool. So we do not have to create in essence we directly had access to car name. Now a simple concept applies. If I wanted to apply this static keyword to a method. So let's go back and uncomment what we had on 9 11 through 14. And this is where we are instantiating an instance of car. OK I'll comment out lines 16 and 17 and let's flip over to the car class. And over here after line 13 Let's say I added a method with the static keyword call right something having used a static keyword. I can come over here. And type in car and I don't see the method and that's because as we've mentioned before cannot forget access modifiers So let's go over here and put in public and now come back to a program and try to get in here. Choose right something. And now I can save and execute and it will run that method. And here we are something. So definitely feel free to visit this page and see the different uses of the static keyword most of the times you'll probably be using it when you want to just not have to instantiate a class but it can vary depending on the project and your uses of the static keyword. So let's briefly talk about the anatomy of a method. There's only really a few parts associated with it. The first as you can see on the left hand side are the modifiers where using access modifiers like a private public protected and then also where you can use the static keyword whether or not you choose to have the method is static. Following that is the return type for this particular example it says void. Meaning that there is no return type. But if at the end of the method we were returning some type of value or object. Let's say it was an integer value then that return type would say it again void following the return type is the name of the method. And in this case it's just simply our core main method and right after that is the parameters or arguments. Essentially the same thing people use that term interchangeably. And in this case it's a string array. And of course everything within the curly braces is the body of the method. Methods are sometimes referred to as functions but functions really refer to a type of method that returns a value in the old days we'd have just functions and subroutines subroutines with the exception that they do not return a value. But the term method itself can apply whether or not it returns a value. So we've written a few methods and one of the things that we've been doing is either including or not including parameters specifically on line 9 parameters such as this one right here where it says string an array of string arguments. So let's go ahead and talk about what's referred to as optional parameters. Another way to simplify methods is to simply make the parameters optional and you make a parameter optional by assigning a default value inside the method. Parameterless So for example if I come over here and pasted a method that has some optional parameters you can see on line 21 through 23. I have a string or double and a boolean and I assign them variable names with default values. So when we run this it will indicate run with the default value of 0 and active as true. So let's go ahead and clean up a little. And by highlighting this code on a line 11 through 18 and let's refactor this and place this in a separate method and we'll call it demo car we'll come that out and instead call our method optional parameters. In fact let's call this to be consistent. Demo optional parameters. And actually I can just highlight this and rename it and the next thing to do is to add the static keyword to optional parameters. Why. Because we are calling it from a main method that is static. As you can see on line 9. So let's say this and run and there's our output with our default values. But if I want to I can modify by changing my parameters to job. And let's say ninety eight point five. And when we hover over this method call here you could see the signature that intellisense is expecting. So if I try to run this again it will use the values that I put in for the first two parameters jump and the number is ninety eight point five. So that's why the parameters are optional because I don't have to put it in because it will use the default values. If I don't. One thing to remember is that for optional parameters you always want to put them last in the perimeter of this. So if I had some other parameters that I was passing in and I wanted to just add in some optional parameters I need to add the optional ones last.

