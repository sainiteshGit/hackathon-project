When building graphical user interfaces you'll often want to data bind a property of one control to another or to some data. And this topic will demonstrate data binding properties to elements and data. So to get started to demonstrate binding properties to elements. Let's go ahead and open up our main page XML and right under the button element I'm going to paste some code. And essentially what I have here is a slider and a text box. And the key thing to note here is that the element name is equal to Slider here. So we're binding the slider to our text box and as a result when we manipulate the slider moving it left or right the content of the text box is going to be updated. That is the value. So let's say and build application and run it to see what I'm talking about. Here's our slider once I move it to the right you can see below the content of the text box which is now 73 has changed as I move the slider down. The value changes and now it's on 36. Now one little thing that I notice is that I actually wanted the slider here to be on the right hand side are basically horizontal with the click me button. So let's check the code here and I see the reason why the orientation should be on the stack panel that has the button directly. So that is the second one right here. I'll paste the orientation here and right now you can see the change happen in our preview right above. So if I am to run the application one more time they didn't change. The reason why is because I did not build. Then go ahead and choose. Bill and all the control key 5. And now we see the difference as a matter of fact what we can do is go to the Configuration Manager and I will make sure that I choose build alongside with the play so that when we do run it it does build automatically. So it shows that so that doesn't happen again. So we finish binding a text back to our slider element. Now what I'd like to do next is bind a rectangle to a slider element so that whenever we move the slider we can rotate that rectangle. So I'm going to paste in some code right before the last stacked panel closing tag. So it started with my comment on my 22 and we have our text box along with our slider right below it. And below the slider we have our rectangle element with its attributes its height and width and the color for it to be red and aligned 28. You see we are binding the element name to the slider rotation and slider rotation is the name that we gave to our slider on line 25. So let's go ahead and save and run the app. And what we're going to do is click and hold and drag the slider to rotate the square so the slider is right over here. And there you go. Increasing or decreasing until it completely turns 360 degrees as indicated within our text box 360. Coming up next binding to data. All right. Moving on to binding properties to data. Let's go ahead and create a new project under the topic see data binding. I'll set the path to the right location. I will call this data binding and I'll make sure that we have visual C-Sharp and a blank application that is universal windows and click ok we'll choose the minimum version as one or to 40 and leave the default for the target version and click OK. OK so the next step is to set our project as the default startup project and then let's go to the build menu and go to Configuration Manager and for data binding we will choose deploy and build this way bills and deploys every time we run our application. OK so what we are going to do is create a UI that is going to display a couple of records and it's going to bind the data which is going to be default data that we add in in our code to the elements such as the text fields. And we'll be able to change that data in this UI. And as you can see all display the first last name date of birth and salary to get started. Let's go into our data binding project and we are going to create a folder called models. So I'll go to add new folder and within here we are going to create our first class which is going to be named employee and we'll simply name it employee just like this and add within here. Let's go ahead and make this class public and add in the following properties for employee ID. First Name Last Name date of birth and salary. Now next we're going to create another class called employees or view model. And this also goes in the models folder. So I'll go choose ad so that class and enter employees view model and add Likewise. Let's make this public and now let's go ahead and set up a collection and it's going to be the type of hash set. So I will define a hash set of employees. I'll set that property and within here I will create in our constructor our employees your model construct their are the fault data that I mentioned earlier. So we're going to have Alice Smith and Bob Jones. And this is essentially just using the object initializer to create an instance of an employee for each of these a new instance and assigning variables to each other properties that we defined earlier in our Employee class. OK so now let's go ahead and say this and open up our main page Zambo in here I'm going to paste in some code. Within our grid let me go ahead and bring this bar up some and I'll paste it in code for a list box. And the reason for this is the list box has the items which are bound to each employee instance and the employees have set of The View model. So right now tightening up a little now would be nice the visual studio automatically did this for me. But it can format but to a certain extent for some reason it does not automatically format the attributes but it will format something like this. I move this text box a little bit to the left and then came to the stacked panel and close. Yeah I will fix that but it wouldn't have done that for the attributes. So let's take a look at what we have here. And this list box it's going to bind each of the elements that we defined earlier that employee ID first name last name date of birth and salary but also important is on line 11. You can see that we are binding to the employees collection. OK. So now let me move this bar back down. You'll notice that there's nothing here like we've seen in the past since the data won't be loaded until runtime. You won't see a preview of the layout and design you but it is possible to configure you WP project with sample data for use at design time. Right now in the Zemo for the page element let's insert a new event handler for the Load event that is over here on line 8. Go ahead and hit enter type loading hit tab and I'll get the option for a new event handler. I'll hit tab again and Page underscore loading is entered in. Now all we need to do is go to the code and we can do this by just adding f7 and it brings us right there. That brings us to the main page that's Zahm of that see us and we can see our event handler for page loading. So here why don't we go ahead and we can assign value to a data context and that will be a new instance of models that employees view. Now let's go ahead and run the application control F5. You can see on the bottom some works being done bottom left hand corner you can see it deployed successfully. And there we have it here you as a user can click inside each box to modify that data values. We want to change this to and same thing for the last name for the date of birth. We have the date picker. And this will look different depending on the device that is being displayed on it will be optimized for input on different devices. I can change this to March 20th somewhere way into the future. 20:28 and also the value Same thing for a second record here. And actually let me go back and change this again to march somewhere in the future. What I needed to do is select check to accept the new date and there you go. And this was able to be done by binding properties to data.

