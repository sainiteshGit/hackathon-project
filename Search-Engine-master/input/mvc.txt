Hi everyone. So I want to go back to our Web App project and spend a little bit more time examining the parts of it. I talked a little bit about it earlier on but I want to revisit it and go a little bit more in depth. So the first thing that you'll see under our web app is something called connected services and if you're caught earlier on in the course I had mentioned regarding adding an extension to Visual Studio so I can clear cash in recent projects. Well this is something similar to that in that it allows you to access different types of extensions. But it goes a little bit more beyond that. So if we right click here and choose connected services we have an option to add connected service. And you see some of the options that it gives us right here right off the bat monitoring and application and sites and tells you what it does. Same thing for cloud storage with Azure storage. But then there's also a link here to get even more. And here's where you get a sense of how much is really available for it and it's quite nice and quite convenient and it's somewhat similar to using new get the same way that we had installed. And if you framework a few lessons ago and that is located under dependencies for New get but dependencies is similar to our other projects also where you can add a reference and basically as the word describes you add components here that the project is dependent on in order to function correctly properties are simply the properties of our projects and you can see what is listed here. And the bottom pane window for properties W.W. root. This folder contains static content such as CSSA for Stiles images or javascript and fav icon essentially cut at this necessary for the front end of our application. The control is this folder here contains the C-sharp classes that have the methods known as actions that fetch a model and pass it to the view. The same way that we discuss what controllers actually do. This is a way to control it go. I don't see one here but like I mentioned there can be a models for those where you would see models and that would contain the C-sharp classes that represent all the data required to respond to an HDTV request. And as I mentioned before the pages this is the equivalent of naming the folder as a fuse. It contains the s HCM and all files that combine a C M L and C Sharp code to enable the dynamic generation of HCM our responses. If we took a quick peek you can see what I'm referring to. There are some CML in there but there's also some C-Sharp code. Once again data this folder contains essentially entity framework core classes used by SPDR an identity system to provide authentication and authorization. In addition to code related to migrations now extensions and services these contain C-Sharp interfaces in classes for integrating with external services such as S M S for sending text messages have settings that Jason we saw this earlier when we modified the name of our database but it essentially contained settings that your web application can load at runtime. For example the database connection string for the identity system which we modified bundle config dot Jason. This essentially is a configuration file so that you can set up bundling and bundling a minute vacation. These terms are often used interchangeably but they are essentially used to improve the performance by reducing the number of server requests and reducing the size of the requested static assets. So essentially what it does is it improves the performance of your application because the files that we're dealing with now are much smaller. And the file that I'm referring to generally involve front end work. For example site men. That's the essence that's the cast Gading style sheet. And then there's the javascript associated with the site. So javascript and cascading style sheets I remember as we talked about earlier those two languages are associated with the front end of application next. Is program that C S. And this is similar to our console applications that use a program that see us. I mean this file is a console application that contains the main entry point that performs initial configuration compilation and executes the web application startup. So yes this is a file performs additional configuration of the services. For example Espey dot net identity for authentication or Eskew light for data storage and so on. And it also routes your application. In fact let's talk a little bit more about the startup file. That's up next OK. Let's go ahead and take a look at our startup class. A closer look at it. So right in the beginning all we have here is a constructor where we are assigning value to configuration and the next line on 24 we're establishing our configuration property but the meat of the class begins here. Configuration services and what's nice is that there's some comments that explain what's going on here. Over here it says that this method gets called runtime. And to use this method to add services to the container essentially what's going on is that this method adds support for MVC along with other framework and application services such as HSP dot net identity as shown here online 32 bloodline 29 and 36 They're both considered services. Also the bigger picture of what's going on here is called dependency injection and to really understand the flow of the code here and how it's working. You need to understand what dependency injection is. So I suggest that you take some time to read up on that you might not need to know it right away especially for what we're doing but when you're building and spit out no core applications and you're doing some configuration it will be necessary. And my simple answer to what the pens√©e injection is is that it's a process of object creation on the fly creates objects on the fly when you need it. And if we were to go ahead and take a look to if I did a quick google on what the pendency injection is let's see how close the definition is in software engineering dependency injection is a technique whereby one object supplies the dependencies of an object and the way it works is heavily influenced by using interfaces. So you'll notice that for example I service collection is being passed in here. I'm not going to go into detail as to how it works because you can have a whole course in fact I've gone through a whole course that covers just dependency injection but if you understand that it's a process of allowing your framework to create to instantiate objects on the fly when you need it. Then it becomes a little bit simpler to consume. And that's what's going on here. And what it does is ultimately saves you time for having to create objects in different parts of your code rather than the framework doing it for you and have components that specifically does dependency injection one is call and inject. Another one is called Prism and AS-P dot net has its own dependency injection functionality built into it. You just need to import that namespace so that you can use it as you see here on line 11 OK. So it's a big topic but this is something you can come back to to better understand but in order to do that. Make sure you have a solid understanding with some simple examples that you can practice on your own of implementing Dependency Injection unlike 14:9 we have the configure method and the configure method. You register middleware. That can work with requests and response to the pipeline. Also it's where you can control how your application will behave depending on its environment status. If it's a development environment it will invoke these functions here. If it's production or some other environment then it will go into the else condition static files are enabled here to allow CSSA javascript and so on to be served from the file system. And online 64 we have Espey dot net identity which is enable for an occasion and authorization and their most important statement here is the one that calls use MVC and that maps a default route and this route is very flexible because it would map to almost any incoming You are oh. And we'll talk about that next in MPAC the way routing works. It all basically boils down to the construction of the rail and how your application is set up to interpret it. So for example if it's set up so that it assumes a perimeter under you or else such as a term a cow needs to go to the car controller then this controller will be invoke. And within this controller the next thing that needs to get done is an action needs to be invoked and an action is basically one of the methods. For example log out could be an action. And in this case we're not passing a parameter but a perimeter could also have been equally passed in here and this route attribute. So I'd like you to take away is that routing is all about mapping your two specific classes in your application. Because that's ultimately what happens. Now let's go ahead and take a look at this chart here. This table contains example you oils and how MVC would work out the names. So note that if the user does not supply a name like in the first row here then the defaults are home and index and the defaults home and index are used as specified when the route is registered. If we jump to the third example muppet and Kermit this would in fact invoke the Muppet controller and within the Muppet controller there would be a series of methods and one of those methods could be Kermit and that would be in. Now in the last example the same thing applies. Products would invoke the products controller within the price controller. We have several methods one of them would be detail and within detail there would be a version of it that accepts a parameter and that's where the idea would be passed in and within that method work would be done. And then it would be redirected to another page. Ultimately after the work is done. So again we're hitting on some big topics here but I always want to mention something that you can take away with it. And in this case it's just that when it comes to embassy routing just think of it in terms of your else being map to specific methods and those methods are within classes which are referred to as controllers and that's all we're doing when we are configuring routing everyone. So we're going to go ahead and create another app. Now espie dot net app. But this time we're going to be choosing another template. Let's go ahead and choose web AS-P dot net core web application. I'll make sure I choose the right location to save and this when we will call web app MVC. And the reason why is because we're going to be using this template web application MVC. This one is the classic version of the model view controller structure. And you're going to see that there's a slight difference from what we've done before. The last product that we did while it had some MBC elements to it. It was actually using razor pages and that's a completely different topic. You can still use concepts from MVC because it also has a few pages that also has controllers and you can add a model also. But this one is going to be our classic structure. You had your folder for controllers models and views right here. And this is what we're going to use for creating an application using the Northwind database. So for now go ahead and set this as the start a project and I will see in the next video Hi everyone. So to get started let's first go ahead and just build our web app and we see that we just added just to make sure everything's OK. All right. Looks good. So now I mentioned that this application is going to be queering against the North Wind database. And so with that we're going to be using entity framework so services that are needed by NBC controllers such as Entity Framework core needs to be registered as a service during startup. So let's go ahead and do that. Let's go to the startup class and open that up. There's quite a bit of code that we're going to be working with so I'll be pasting them in to say some time rather than just typing everything in but you will have that option to just pause and or just copy it from the section of the solution where it's already completed. So now I want to add a database context to the configure services so let me scroll down to the configure services method. And I will simply paste in services dot at D-B contex. The next thing that I want to do is to add a reference to our previous project where we used an ID framework. So I'll simply right click on dependencies and choose Add Reference and I'm going to choose any framework core and click OK. Once I do that I can come over here and it control period. And so like using Patty C-s which is a namespace that we use. If I went up to the north wind class in our entry framework project you'll see the name space is Paxi see seven. The next thing that I need to do is to configure our connection string and we do that by going to settings and simply add in a reference to the connection string which points to the database. So I will come over here and paste that in connections Northpoint connection that takes care of configuring entity framework core. And now we are ready to move on to the next step which is creating some of your models for our requests. So let's go ahead and take a peek at to what we're going to build. Essentially it's just going to be a web app that's going to display the products from the North Wind database. But in addition when you click on one of the product links it will show you a detailed page. And lastly we'll have some functionality where you can actually specify a particular price range and then it will return products that are higher than the price range. So now imagine that when a user comes to our Web site we want to show them a list of products and account and the number of visitors we had this month. All the data that we want to show and the response to our requests is really due to the MVC model and it's sometimes called a view model because it is a model that is passed to a view. So let's go ahead and create a new bottle that's called Home Index view model. We're going to go ahead and add a class to their models folder what you do is add a new item. Let's a Espada core here. And then choose class and I entered a home index view model and now let's go ahead and modify the concept of this class. I'm simply pasting in two properties a collection for products and an integer property for visitor account. Now the next thing that we want to do is to fetch the model in the controller so to do that. Let's go to our controllers folder and open up the home controller class itself and in there. Let's go ahead and add a field to store a reference to a north wind instance and initialize it in the constructor. Now just for a quick reminder you can always do or use a shortcut to create a constructor just like this creates home control. But I'm going to go ahead and paste it in the code that I have already set up. And that's going to add the constructor passing in the context that we need and we'll assign it to the variable D-B. Now north when there's a little squiggly red line we just need to import the namespace. So I'll do control period and select using pack. And there we go. Now let's move on over to our index method which is over here and let's modify the contents of this index action item to make it look just like this. What we're doing here is simulating a visitor count using the random class to generate a number between 1 and a thousand OK. So we successfully created a new models for the request and then set up some code to fetch the model and the controller. Coming up next rendering the home controllers views Hi everyone we're going to take some time now to walk through some code and discuss the process of rendering the home controllers view. Now the responsibility of a view is to transform a motto into a similar other formats. So right now let's go ahead and expand the views folder and then expand the home folder. So right over here there is a fuse and there is the home folder. I want you to note the three files that are in there with the C-s CML extension when the view method is called in a controller's action method. Dot net core MVC looks in the views folder for a subfolder with the same name as the current controller that is home. It then looks for a file with the same name as the current action that it is about contact or index. So for example if we take about and go to the controllers open or controller we can scroll down and we'll see that there's an about method and after it does the work that's in this method then it will render it using this about file. Now let's open up this index file at the very top here. You'll notice what's in the curly braces. This will be executed first and can be used to store data that needs to be passed into a shared layout file. Right below you could see some standard CML except that you can see with some attributes that are associated with bootstrap and there is a third party software that is used for styling. Now let's talk about sharing layouts between views. There's a file name underscore. View. Start and that is right over here. This file gets executed by the view methods and it is used to set the defaults that apply to all views. So for example it sets the layout property of all views to a shared layout file. If we're to go into this shared folder right over here you'll see that we have a lay out file something to note on line 6. You can see that this title is being read from the view data dictionary that was set earlier in the index file. If you recall we switch over real quick. That was over here. Home Page. Why don't we go ahead and make a change to the title here. We'll set it to say my first espie not Natcore app. OK so next thing I'd like to talk about is defining custom styles and type views that's in the upcoming video. OK so we're going to do a little bit of defining of custom styles. We're just going to pretty up our display so that it looks like a newspaper column when the products are displayed and and the way we're going to do that is by updating the style sheet. So let's go to w w w root and open up style that CSSA and we're going to just simply add in this code snippet Aztek newspaper and just put in the column as a three column count and that's it. Let's go ahead and say that we're close and the next thing that I want to show you is how to define a type view. So if we're looking at let's say the index page right over here in our home folder under views to improve Intellisense when we're writing of you you can define the type the view can expect using that model. So for example I come up here and type an AT model and specified this type. What's going to happen is whenever we enter that model in this view Intellisense will show us the correct type and will provide access to some types within home index view model. Now I'll show you what I mean just in a little bit. But for now why don't we go ahead and update the code that's in here. So I'm going to go ahead and delete everything that's within the div tags and replace it with this code. Starting from 9:07. And so this is what I meant when I was referring to being able to access other types. You see how on 17 we can write model products. Well right now if I hit period products will show up that's Intellisense helping me out. That's a direct result of me stipulating what we have here line. If I were to take that out when I come over here I don't have that nice intellisense. OK so we've done quite a bit of work. Let's go ahead now and test to see if the app works as we expect so far. I'll come up here and hit the green arrow button. Now note we can have ideas express but we can also specifically choose our application. Go ahead and choose our application and you can see it says your app is starting. And there we go. We have our list of products. Nice. So one thing to note is that if we click on one of these links nothing comes up. We don't have a detail page yet. And also if we come down here and try to enter in price of a product and submit. Also nothing comes out. What's supposed to happen is it's supposed to display a list of products that are more expensive than the price that we entered. So the next few videos will be to add those functionalities. So now that you've seen the basics of how models views and controllers work together to provide a web application let's look at a common scenario such as passing a parameter. Let's go back into the home control A-class and let's go to right above the index method and paste an a product detail method inside this method we check to see whether ID is no. And if so it returns a 404 status code and a message. Otherwise we can connect to the database and try to retrieve a product using the ID variable. If we find a product we pass it to a view otherwise we return a form for status code and a message. So this is a method that's going to do some work when we are passing in a parameter to pull up a product detail page. So now let's go ahead and actually create the product detail page inside the views folder. That's right click on the home folder and choose add new item and we're going to choose MVC view page and I will call it product detail and site here. Let's go ahead and modify the content to use this code. This is going to show the columns that I care about the product ID the name category ID and unit price and units in stock. This is complaining right now because it must not be in the model. So let's go ahead and do that. If we scroll up to the Citicorp project that's open up the product file. And here I will paste in the property for units of stock. I'll say that I'll save all the changes that I made. I'll go ahead and build this particular project. All right click here choose Bill. And now when we go back to product detail it's no longer complaining. So let's go ahead and run that application and see how it looks so far. Looks to be starting up or is being done in the background. Right. And we have our products and now go ahead and choose one of them and there we go our product detail beautiful. So what we've done here is demonstrate a passing a parameter using a route value and you get also from there. You are ill with three that was selected as the ID when we chose the third item here. Now let's go ahead and demonstrate passing in a parameter using a query string value. So that means we will be entering as a user a value and then seeing the results. That's up next. OK so we are heading towards the end now and I want to demonstrate how to pass a parameter using a query string. So move on over to your home controller and within here I'm going to paste in a new method. I'll go ahead and do it right before the index method. And it's called products that cost more than. Now for this complaint over here I just need to import the namespace so I'll go ahead and control period and import the framework. So what's going on here is fairly straightforward. First we just make sure that our price variable has a value and within the array if it is empty we'll get a message that says no products cost more than X amount and immediately jump out of this method with the return statement. And if not it will return to value and format it in a currency pattern and then send a model to the view. Now we currently don't have a view for this scenario so let's go ahead and add that Likewise we will go to the home folder within views and do the same procedure at new item MVC view page and I will call this products that cost more than within here. I will go ahead and paste the contents of the view to display the category name product unit price and units in stock and right below is the logic to iterate through the monel and write out each item each record each product and that is it for this page. One last thing I'd like to show is if we go to our index page towards the very bottom you'll see that we already have our form set up and our form was call products that cost more than. So let's go ahead and run this and see what happens. Work is being done on the background. And now let's go ahead and take a look at some of these products that we have here. The first one is $18. Second 19. Taking a quick glance. They go up fairly high $263 most of them are around under $100. So why don't I go ahead and put $90 products that are higher than $90 and I'll submit that. And there's only three and as you can see each of those were more than 90 dollars 97 123 and to 63. So one last topic I'd like to touch on is annotating models. Now you might have noticed that the column headings and the table use the names of the properties by default this means that if the property is multiple words it won't have space. We could use data annotation to improve this to make this look better to actually add a space the way it's supposed to. Let's go ahead and take a look. Let's go to our entity framework core project and open up the product class for product name. Let's add an annotation right under string length. So it is displayed just as how I've written it over here. We can go ahead and do the same for the other properties such as. We can also do it for unit price units in stock and category name. Now that's not over here. Category name is in the category class. So we'll come over here and paste the annotation accordingly. Now the reason it's complaining is because we also need to import the namespace for data annotations. So save everything and that's run to see our final product. That would be terrible to crash to the last moment. All right looking good so far. Let's put in a price that's put in a lower price so we could see some more data 40 submit and there we go our columns are neat this time with the help of data annotations.

