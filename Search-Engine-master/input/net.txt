So we talked quite a bit about dot net and create a simple program via the command line. Now while it's pretty cool that you can code through command line most likely on a real project you're going to be using an ID like Visual Studio which is what we installed earlier and this topic we're going to get acquainted with Visual Studios interface and some of its best features. So let's go ahead and start with what some of those are now right off the bat. One of the most important features that Id bring to the table is the ability to debug. We're not perfect beings and when we code there's going to be mistakes that are made and to be able to detect those mistakes is incredibly important and it saves time and that's something that wouldn't be easy to do if we had to code through the command line. So Visual Studio has a part of the bug and feature and we will demonstrate that later on. Now another feature is that it's very extensible now even though Visual Studio brings a lot to the table sometimes there are features it doesn't have. And fortunately there's a marketplace where some developers out there are creating little plugins that you can actually use within Visual Studio. So for example when I installed Visual Studio on my computer for this course it was showing several recent files that I had been working on and I didn't want to show that I wanted to clear that out. And if you could see here under reset it's clear there's no older projects that are being displayed. But there really was an offer to simply just go and clear that cache that displayed all these past projects I was working on. So I was able to find though that there was a plugin that I can install that was aptly named clear reset. So I downloaded those and it install it and restart Visual Studio and now I'm able to just go to the option and type in clear and it will show me an option to just clear all my cache that displays recent projects and solutions and it worked perfectly. So that right there is the easy example of an extension of the will to simply find and use Visual Studio also brings to the table the ability to use different source control systems when you code you need to save that code somewhere. And you don't always want to save it locally so it needs to be saved somewhere on a server and they have applications that are specifically designed for that. There's team foundation server. There's a good hub and visual studio gives you the flexibility to choose one versus another. Also with the latest version of Visual Studio you really have a strong capability to merge dot net with other third party technologies such as angular and Nogi asked years ago. It was a lot more difficult to combine Dattner technologies with other third party technologies. And now that's changed. In fact it comes with templates that can just help you start up a project using anger and that makes life a lot easier because programming is not all about using just one language one tool. It's really about using a series of technologies together in order to make a successful application. And lastly a visual studio is such a powerful program you're able to create mobile applications Windows applications web application and various others all from this one ID. And that's what makes it so useful. Nonetheless it does have competitors if you're familiar with programming you may have use other IDs some other ones that are really notable are eclipse. Intel the J and neck beans and Visual Studio itself has different flavors which I mentioned earlier. There's a professional version. There's the enterprise version which is the mother of all four ideas in terms of Microsoft the Visual Studio enterprise. And then there's a lightweight cross platform version which is Visual Studio code. What we install is Visual Studio community which is more powerful than we actually need in order to complete the demonstrations that we're going to be doing in this course. So without any further ado let's go ahead and jump right into Visual Studio. That's up next. All right so let's go ahead and large Visual Studio. I'm going to go over here and just type in visual Now sometimes I'll just be launching it from my task bar as you can see here there's a shortcut to Visual Studio and to add that we could just right click over here and pin it to the taskbar right now since the story there. It gives me the option to unpinned. But if it's not there I can right click and simply pin to taskbar and then come over here to launch a Visual Studio. Now when you launch Visual Studio One of the things that you'll notice is that there's links to various developer news here on the right hand side of the window. And I highly recommend checking them out and reading them maybe like one article a day because in the long run if you're working every day five times a week you're going to be really increasing your knowledge with what's going on in the microsoft community especially related to Visual Studio and the new features that are coming out. So definitely check it out. The third option where says M-S test version to bring you to a Web site that has their content and you can go ahead and read it and you'll get familiar with some of the popular bloggers that talk a lot about this type of topic. On the left here under get started there's some more content. Here's a simple link to build your first app in five minutes or maximize your productivity with these tips. So again this is useful information. You could just come and check out whenever you have a little time. Probably best to do it once in the morning before you get your day started. Now let's open up our exercise files for this course and we're going to be working with. And I have mines saved in a directory called code in the root of my C drive. So I will go to code and within there there is the beginning. Modern C-Sharp fall there and from there I will launch the beginning modern C-Sharp and Dot Net development solution neither solution file that we are going to be working with is loaded for this course in Visual Studio. We have solution files each solution files have multiple projects that can be associated with it and most of our exercises that we're going to be doing are going to be on their own project and you can see them here in our solution. Explore in the section on the right hand side. For example if we were to open up the folder for less than one under the and a folder there's a subfolder called topic at understanding dot net and you see that there is a verse program project and that's how these projects will look. With this icon here so let me go ahead and close this out and go to the begin Boulder. Now we can either create projects or add existing ones. So we already know that we created a project early around called First program and that is similar to what you just saw in the end state. But let's go ahead and add the one that we created so to do that I'll simply right click here and choose Add go to existing project and then I will navigate to where we saved our project and that is under the folder beginning. Modern C-Sharp less than one begin and Topic A. And there we see the folder for our ferse program. So I'll double click on that. And what we want to do is choose the file with extension C S P R OJs standing for a C-sharp project. So I'll go ahead and highlight that and open. And now in the solution explorer we see the project that we just added. This is the one we just created. That's something that I want to point out is that these folders here that you see like less than one begin topic A. These are not dynamically created on the hard drive. I created these here through the solution explorer. So for example under the topic a forwarder come and create another folder. And the way we do that is by right clicking and choosing add and type in news solution folder. Let's say I call this test if we go to the Windows Explorer under beginning modern C sharp lesson one begin. And if we go to topic A which is where we would expect to see our test folder it's not going to be there. Because this is something that's used in visual studio just for the purpose of organization. It keeps things neat and I highly recommend separating your projects if you have a lot of them within folders. If not and you're just working with one or two then it's OK to not have so many folders and layers. So let's go ahead and delete test by choosing remove after right clicking and there. Now that's going. Another thing that I want to point out is that we can temporarily hide these folders. Now since we are currently working on less than one let's hide listen to through 7 and to do that we need to hide them individually by right clicking and choosing hide folder. I just highlight it listened to and now we don't see listen to anymore. And I'll do the same for three four tieless and five six and seven OK. Now I can just focus on Lesson one. Another thing that can be done in respect to projects the same where we hide the folders we can kind of do the same thing with projects except what we do is we can unload a project. So for example we have two projects here. There's two versions of the first program project. Now let's say we were working on this one right here under the begin folder and we had an error in this project. Well when we're compiling the solution it can prevent the whole solution from being compiled. If one project has an error. So right now I just double click on the program file and I'm just going to add some garbage in order to just cause an error. I just literally typed in garbage OK. Now this makes no sense. To the compiler. So if we try to build the solution by are going to build and choosing build solution we're going to get a compilation error as you can see here at the bottom under errorless. And so this can be an issue if we're working on several projects and we're stuck on one. We don't know why it's giving the error we may want to temporarily disable that project and to do that we can simply right click this first project and go to unload project and now it's unavailable. But you can see that it's there for a reference so you don't forget about it. And now if we try to go and build the solution it should build and it does because all it builds it is a successful projects that don't have an error and ignores the ones that's unloaded. OK so let me go ahead and reload this and we'll get rid of our garbage and make sure everything builds accordingly. OK and so now if we want to just test our project we could just right click and we want to make it the startup project so that since we have multiple projects here visual studio needs to know what to run first and to do this I highlighted and I will go down to set as start up project and that's where it will run. So to run the program we can go to debug start without debugging and what that does is it runs a program and it holds the console screen so we can see what happens. And there we have it shine and rise. So now let's go ahead and create a program from scratch. That's up next. So I'd like us to create a program a very simple one from scratch. So let's go ahead and close out this window here. If you still have an open call program see us and what we're going to do is move on over and highlight topic a right click and choose add new project. Now there is a variety of different types of projects that we can create in Visual Studio and the one we're going to want to do is a C-sharp dot net core project and that's what's currently highlighted right here. But if it's not for you just make sure you choose C Sharp over here on the left hand side which is under install and then choose dotnet core. So for example if everything's collapsed you will just want to collapse. Install go to visual C-Sharp and choose dot net core and intice list will choose a console application. And we're going to give it a name of welcome dot net core and the location is going to be under Lesson one the giving topic A and select that folder and click OK. And now we have our sample the console application. So what we're going to want to do next is make sure that that is the default a startup program so when we run it it executes and not the last program we were just working on. So again we were right click and choose set as startup project and now you can see that it's in bold. Now there's a few things I'd like to show you here forced us to go to line nine here where it says console dot right line and we're going to comment that out by adding two double slashes. And what I want to demonstrate is the power of the intellisense that Visual Studio brings to the table and it's really amazing and makes life a lot easier. If I wanted to write out a line and I started typing X Y you'll note that the intellisense menu appears and this Intellisense shows a filtered list of keywords name spaces and types that contain the letters s y and highlights the one that starts with s y that it thinks that you want to use. And in this case it happens to be system which is what I want. So now I'm going to go ahead and type in a dot and we'll see what happens. It automatically completes writing the word system. And now having typed the DOT it now displays a list of more types such as aggregate exception app contex app domain none of those are what I want though what I want is console's so I can start typing c o n s o l and then I will see that the word that I want is now highlighted and I'll just hit enter for console and once again if I type the DOT it will show me another filtered list and I can start writing. And the word that I want this time is right line which is what we saw above cancelled dot right line. Hello world. So this time we are going to write a new phrase. I'll start by opening up a parentheses and you'll see that the second parentheses was automatically generated. I didn't do that visual studio automatically assumes if I open up parentheses it's going to close somewhere. So let me do that again. I type in the parentheses and it automatically created the closing one. The same thing happens if I open a quote it generated a second quote to close it. And now I'm going to type in a string. In my string statement will be welcome dot net. Cor that squiggly red line at the end is there indicating that it is not the end of the statement it expects a colon to end the statement. So there would be a compilation error if I tried to run the program like this so I'm going to go ahead and indicate that that is the end. And there we go. And now to compile and run this we can do what we did before debug and start without debugging. Now oftentimes you're going to be testing your programs frequently and it becomes cumbersome to actually go to the Debug menu each time so I like to use the shortcut like control 5 so I'm going to go ahead and do that to run and we'll see our output welcome that Natcore exactly as we expected. All right. So let's close this out and do something here. I'm going to remove this termination statement of the semi colon and then we're going to try to run again and we'll see that we get a compilation error. Now it says there's been a build error. Would you like to continue. No because we want to see the build error. Now it's important to get good at understanding the errors that pop up in how to interpret it and you can see it here under. Error list that there is one error and it indicates that it says a semi-colon is expected. And when we look over to the right it indicates to project that that errors in welcome that in their core which is right because that is the name of the project that we created and that we're currently working on. It also indicates the file and the line number and if you were to double click on this it brings you directly to the line that we're at on 10. Let me go ahead and put the cursor on line three like this. So we know that the cursor is on three and I'm going to go back here and double click and there you go. It brings the cursor to line 10 and that's an easy way to narrow down where your error is. Now one last thing I'd like to show you here is that when you're writing a lot of code sometimes at the organization and lining up of the semi colons in your line statements can get this organized. So for example let's say that we have this all aligned like this which is really not the right way to have your code. And just to show how disorganized it can be. I'll go ahead and move these brackets and statements like this. Just really. So it is kind of misaligned. There's a quick way to automatically format it and the way you can do that is by going to edit advanced format document or just use the shortcut control K control D and by doing that it automatically formats it. And that's a nice little time saver. To save the document whenever you build it and run it automatically saves it for you. But if you are manually wanting to save it you can simply press the save button up here. Or if you have multiple documents that you've made changes to just click the double disk button and it'll save all your documents and you can always tell that something is not saved because there will be an asterisk right next to the file program. That's yes there's an asterisk there. When I save it asterisk goes away. All right so now we just showed you prior to the formatting topic how to narrow down error that occurs when you try to build. But there is a better way to troubleshoot errors that you have in your program. And that's through debugging. That's next. Debugging is all about fixing problems. Now those problems could be in your code. It could be in database. It could be in the structure of your solution file that you're working with. For example we're talking about visual studio. So the topic that we're actually hitting right now is topic B. It's an overview of visual studio. However one of the exercise that we did welcome dot net core is still under topic a. So this is a perfect opportunity to fix this by using one of the features that I mentioned earlier regarding unloading a project except in this case when we unload the project. We're also going to remove it and place it under topic B over here. So let's go ahead and do that by highlighting welcome a dot net core we will unload this project. And now once we unload it we can remove it from the solution. I'll go ahead and click OK. And now what I'm going to do to make sure that it is consistent is go to Windows Explorer and move the location of that project there. Also because even though we remove it from the solution it's still on the hard disk. So under less than one begin topic A I will come over here and cut and move this to topic B. And paste and now I can minimize this and go to topic B and add the existing project under beginning modern and one not the end folder but the Begin under topic B. Now we have our welcome dot net project that we will go ahead and add in just to test it. Let's go ahead and reichlich and start a project. We'll hit F5 to run and it ran the program but it disappeared real quick. That's because the console didn't hold. And that is because I had just five in order to have it hold. We need to press control 5 now to say welcome donet core and hold the console application. So I remember just running it by clicking 5 is the equivalent of just saying start a debugging and it runs the console application but then it doesn't hold the screen there for you to see it. However if you do control five you know start without debugging and that's just the equivalent of holding the application. Another way to do this is if we added a line that just said read key kaso dot read key or in this case say redesigned essentially will have the same effect as far as holding the console application. Now if I just hit F5 the console also remains but I with my personal preference just prefer to just run without debugging and have less code so none of us talk about the debugging process I'm going to go ahead and focus on the core features that you're going to be using the most the most frequent throughout your career and also in this Course itself. There's actually probably an hours or two hours worth of material that I can go through going really deep into the book. But that would be beyond the scope of this course. So in this particular scenario with we're going to do is show the process of stepping through code and watching variables in order to troubleshoot something if we needed to. So for example let's go ahead and create a separate Mufid that will actually print out some code. I'll go ahead and show you a quick way to generate a method instead of like writing it out by selecting quick actions in refactoring. And you see we have an option for extract method. And when I hit enter here what it does is extracts the content of the method that I was in and places it in a new method as you can see here is highlighted new method and what I'll do is give this method an appropriate name such as print. And by doing this you might notice that there's a small little window here that pops up that says Do I want to include this in comments. Do I want to include this in strings and what it's referring to is the name change that I'm making here. If there's the same term in a string or in a comment do I want the changes affected there. Because what you'll notice is whatever I'm typing here it's being affected right below. So where else do I want those changes to happen. I'm going to go ahead and ignore this where in this small program right here and I really don't need it to change anywhere else. Now by closing it it just got me out of the rename state. So I went ahead and just right click and chose rename again so I can put the appropriate name that I want which is print. Now I can finish it say let's say call the print statement. And hit answer and what I'm going to do. Now what we can do is just set up a couple of variables. One will call that first statement and they will both be of a type of a string and that first statement will be what we originally had. Hello world. So I'll just copy that and paste that here. And then we'll have a second statement. And that will be our welcome darknet core statement and what we're going to be doing is passing in these two variables first statement and second statement to our print statement method and we can probably change just the plural so that it makes sense logically as soon as I start typing in a burst. Intel says is smart enough to realize that maybe I want to choose first statement which is correct and I will do the same for a second and choose that. Now the reason that we're getting this error here is because print statements that method is not expecting any parameters yet. So let's go ahead and add that in over here I need to specify that we are expecting a string and I'll call this FS one and then for our second variable let's just call this for a second statement and we'll say to actually to make it make more sense. Let's just say s1 s2. Statement 1 statement to whenever I code I always look back to see the way that I'm naming variables so see if it's going to make sense. So I encourage you to do the same thing whether you're doing it while you're coding or after you finish coding you want to go back to review. But it's really a better practice to do it while you're coding so that there's less work to do. Towards the end and most likely if you finish writing a huge application you have less incentive to go back and rename all variables especially if it's going to cause risk to break something. And now what we can do is write out these two statements that we just pass through. Print them out. And we will do that by passing into right line S1 and as to what I will concatenate them OK. We're almost done. Now let's tighten this up a little. We really don't need the name system here. System doesn't need to be shown right now because at the top of the screen you could see that we have using System. So that means that it's importing that namespace. And we'll talk about that later on. But if this wasn't here then it would be mandatory to have system written over here as you could see the word system has darkened. But when we have using system on the first line becomes grayed out because that's intelligence saying we really don't need to show this. If we were to move our cursor over here and choose show potential fixes it gives us the suggestion which is to get rid of system. So just by hitting Enter we got rid of the word and now just simply says cancel that right line all right now I'm going to go ahead and save this. And we are going to run just to make sure things work as expected. And it does. Hello world. And welcome darknet core. So let's close this out. And now actually debug through the process. So when debugging what you want to do is put a breakpoint where you think you need to before an issue occurs. So in this particular case we don't have any issues happening but to say that we thought that there would be a problem within this print statements method. What we want to do is hit a debug button right here and all we do is just click on this bar this gray bar here to start the debugging process. We can go to debug and just choose start debugging. And you can see there's a small yellow arrow in our red circle and that's where the break point was now hit. And so when we're in this state right here we are essentially debugging and what we can do is start paying attention to the different variables and their values that they contain. For example first statement and second statement they both have values in the first statement the value of hello world. And you can see that right here in this small gray box here. The same applies for a second statement but you can also see it in this watch window here. So if I were to come over here and type in first statement again intellisense is working almost everywhere I type in first and it seems that I might mean first statement. Let me go ahead and choose that and hit enter. You can see the value is hello world and it tells you that the type is string. So we'll do the same for second statement and take a look at its. I type it in. Hit enter. Welcome dot net core. And that's perfect. That's exactly what we expect. You can even come in here and change the value live by typing in say hello world exclamation point exclamation point. So there are a few more times and hit enter. And that's the value that it's going to hold while you're debugging. This is a shortcut for doing some small live testing but not complete the ideal way. But it's nice to know that you can do that. So if I come back up here and hover over a first statement hello world with all the exclamation points. Now most important the Debug menu is up here on the toolbar. It has this menu where there's a pause button a stop button restart refresh show next statement step into step over step out of and show threads the most important ones are going to be to stop restart and stepping into stepping over and stepping out. So for example we are online 12 right now. If we were to step over it will run print statements but it won't go in here for you to debug. But in this case we want to actually step into it so we can see the bug line moved to the next statement and now it moves to line 16. If I step into again we're now on line 17 and then if I take a step into really quick quick step over and it does the same thing stepping into is really when you want to go into a method and we're ready in a method right now and there's no method to go into further. We can step over and it should have written to the console. The output of hello world. And welcome. And if we move down words you could see that that has been done. There's the council right there I'll go ahead and minimize this. And now this is where I can go ahead and step out of the method even if I didn't step to step out of it well because there's really nowhere further to go. So let's go ahead and choose step out of and we will just step over again. It brings us to the very last line of the program. And now when we step over one more time the program has terminated because there is actually nothing to execute and that is it. That's a quick crash course on debugging focusing on the most important features that you're going to need to know for our purposes. And I should point out that what we just demonstrated was focused on the debugging too of Visual Studio when people use the term debugging. It can encompass other ways of debugging such as writing our content to text files to troubleshoot something doing something different in a database or using some other third party tool under the umbrella of quote unquote debugging. But in this particular scenario we're focused on using the major features of the debug tool in Visual Studio. So there's a few more features that I'd like to show you in respect to Visual Studio and it's you. I but first of all let's go ahead and get rid of this break point that we have here. And I want to revisit something that I mentioned a little bit earlier so we talked about intellisense. Now if I were to remove these two words first statement and second statement here and I got rid of the first parentheses and added back in you'll see that Intellisense lets me know exactly what parameters it's expecting. So it has two strings S1 and S2. And that's because of the method that I have defined right here. So if this method print statements was hidden and it was part of the dominant classes this is how you know how to use it just by being able to read what intelligence is saying that you can use. So I'll go ahead and paste the two words back in. And I want to show you that this also applies to a method that we've already been using right line. So when we first put in the parentheses you could see that it's expecting a boolean but that is 1 out of 18 different ways this method can be used. The first is not passing in any parameter at all. Another is by passing in character. Another is by an array decimal a double a float. So there's quite a few different ways that you can pass in cotton. And when we get down to number 11 you see a string value and that's exactly what we're passing in a string value another way we can easily see how we can use right like this by right clicking on the word and then choose go to definition. And there you go. You have all the different implementations of the right line from passing and nothing to the Boolean to the character up to where you see here on the line. Twelve seventy where we're passing in a string value. Now I'll close this window out. You don't always have to navigate completely away from your current screen. If you right click and chose pick a definition you can also see the same content except in a partial window just like this. Which is pretty cool. Now visual studio like most Windows application has a menu bar at the top and there's quite a bit you can do with it. But for a quick glance we have options under our file menu at it View project. Bill. As we go through the course we will be using several of these and not everything that the menu options offer because that would be beyond the scope of this course but we will be having a section of the course where we'll be working with the database so we'll have to connect to the database and you can see that can be done using a menu option right here. Or it can also be done through code. If we were doing some testing we'd be able to run our tests and debug our test using the menu options here. The same applies for using performance profiler's and also just structuring the way in which we use our windows. We can split a window such as doing this and now we can see part of our code and on the second part at the bottom. Scroll down if we wanted to see another portion of our code. Unsplit you can just bring that bar up by clicking on it and dragging it up. And if you needed any help on any particular topic you can use some of the options here. Or you can also use this quicklaunch which is a great way to type in a key word. If you're not sure with all those menu options how to navigate to something. So for example if I wanted to type in the word console this automatically brings me to different options that are related to console's. Like if I wanted to go to was referred to as the package manager console I can simply click here and that will bring that up which is now at the bottom here. Package Manager console the package manager console is window that you can use to install additional software that will work within Visual Studio. Another way that can be done is by using new get. Now if I typed in the word NEW get it instead of trying to navigate through a menu you could see that we have manage a new get packages and what that's telling us is how to get to it says to go to a project and then go to manage new good packages so I can either click here or go to project and manage New get packages and that is pretty cool. So yes we have a huge menu with a lot of different options but we have a quick launch in order to help facilitate how to jump to certain areas also. And this right here is another area. It's essentially the same as Package Manager console except now we have a UI where we can see the different software that we can install so we can search for something like if I wanted to type an entity framework it starts filtering things out related to the framework. And I can go ahead and try to find exactly what I want to install and here's the framework. Now in this particular case it's more useful to just type the word out completely. Because when I just typed in an entity She-Ra it didn't bring up any framework so I don't feel that it's as great as the intellisense filtering but it still is a nice way to be able to filter things out when you have the word written out pretty much completely. Now I'm not going to install this now but we are going to do this later on in the course so we'll get a feel of how to actually use this to install additional software to close out this window. I'll go ahead and click this X here for Nugget welcome darknet. And we're back to where we were now. Sometimes you may want to change the look and feel of the UI. So one of the areas that I think you may find useful is to go to Tools Options and if you wanted to change it. Now let's say you wanted to change the font and wanted the size to be bigger. Here's where you can go to choose fonts and colors it will be under environment fonts and colors. And then we can choose size just go ahead and change that to 20 and click OK. All right. Now that did not change it. Let me go back again and take a look. Tools Options fonts and colors. OK. And the reason why is because it says output window. So we have here an output window that the size has increased to 20. So there's a lot of details to pay attention to. And this is actually good if you're doing any type of recording and you want whoever is watching your recording to be able to read clearly what's in the output window or let's say in a command window you need to be able to change and increase the font size from where I just showed you. So right here we see the word test if we wanted to increase the size of the font and the command window. Go to command window and choose 20 and that increased it here. And so for over here our main window to change the thought of our main window we would want to modify the text editor. So if I go to a text editor and then change 16 to let's say a chain. Now we see the font increase in our text editor. So we have quite a bit of flexibility. One area that changed the font size 4 is for the command window. So right now it's at 20. I actually like that size right there so I won't change it but if we want to see the command window that is right overhear it for some reason one of these windows didn't show on your UI which you can do is go to you other windows and right over here the first option is command window. There's also the theme that you can change which is what you chose when you first install visual studio. So again under Tools Options if we go to general there is a color theme. I'm currently using light but if I want to I can change it to dark blue or blue with extra contrast. So let's change just temporarily to dark and see how that looks. And there you go that's the dark theme which I particularly don't care for so I'm going to go ahead and change that back. And there we go. Now a quick way to increase the font size in the text editor is just by changing the scale right over here. Right now it's at 100 percent. I can't change it to 150. And the words are a lot bigger but it's not actually changing the font size it's just the perception the view the scaling. So we're going to go ahead and change that back to 100. But if it's just for you that you need to increase the size just for a little bit that's a quick way to do that. OK so let's step back and look at a few more observations in Visual Studio to the left hand side. You'll notice that there is an option for toolbox. Right now there is nothing in it because we are working with a console application. So if we had another type of application that had a UI a user interface then you'll see some options that we can use for that UI. But the toolbox is a server Explorer and that gives us some access to tools that will allow us to connect to databases and servers. Now we're not dealing with that right now but just wanted to point that out. We will be working with databases later on in the course though towards the bottom at the very bottom you'll see that there is a status bar and to the right there is a line number and column number and character number that it indicates. So if I go to line 9 and scroll down you'll see that I started with nine but now the line count is going up. And if I move over to the right are character count increases as I move down to line 15 or column count and character count. And over a little bit to the right of the status bar you'll see that there's an option to add source control. And right now the default is get in source control is where you want to keep your code to have it as a backup so that if anything goes wrong locally there is always a reserve to go back to retrieve your code. Now the lay out of windows here are pretty flexible. For example if we go to the solution explorer we're able to actually grab this and move it around. If I wanted to I can move it over to the left hand side and dock it there. Now you'll notice that there's a little blue square here along with these other squares in the center of the screen and they guide you to different areas that you can dock the solution explore. So if I chose this right here it will dock it on my left hand side. The same applies to Team Explorer or the properties window and also the windows below here such as package manager canso error list. Pretty much any window that you can add and remove. Now I'm going to go ahead and grab the solution explore and duck it back to where I had it before. And there you go. So this is pretty useful if you want to maximize your realty. And if you had to Maunders if you're working with you can take these and place them on the other monitor and then just have plenty of space just to look at your code. One last thing that I wanted to mention are that using the concept of code snippets. So for example if I wanted to write a property I could actually start by typing out property but there's also these code snippets that I can use. So for example I can choose Propp full and when I hit enter the prop 4 comes up but if I hit tab it puts out a private variable and a public property that I can populate. Now let me go ahead and get rid of that. There are also snippets for some code functions such as for loops. If I came in here and typed in for you can see there's a code snippet right here and you could tell that it's a code snippet because it's a partial Square and at the very bottom are these little dots so there's 1 4 4 for each. Let's say I chose for each and then I hit tab. It basically writes out the text for the beginning of a for each statement. And then I can just tab put in a variable I call this I and then change this to my collection and hit enter. This makes it a lot easier to spit out some code that you don't need to write out fully on your own. For a complete list of code snippets you can go to this Web site here. And just play around with some. Now some of these might not make sense to you right now but as we go through the course you will learn to appreciate some of these snippets because they will then be familiar with you and as a matter of fact the next lesson is diving more into the C-sharp sharp language and coding. 
