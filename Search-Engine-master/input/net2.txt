So we installed Visual Studio. But before we hop into using it I want to take a moment to explain something this course is called Beginning modern seashore and darknet development. Now you may have heard of C-Sharp and know that it's the language but what's in it. Believe it or not. Many of helpers can't even explain what Dardenne it is even though they've been coding with it for years. And there's a reason for that because the definition of it itself can be a little bit convoluted. Microsoft finds that that as a free cross-platform open source developer platform using the term platform twice they're for building many different types of applications before the web Mobot desktop gaming. Internet of Things and you're not limited to using it with just one language. You can do all this in several different languages. However that's just one way of thinking about that. And it's also thought of as a whole ecosystem that is a family of technologies consisting of the Dot Net Framework dot the core documents standard dot net native which are all related and overlapping platforms for developers to build applications and services. So now if you're asked in an interview was Dot Net are you going to remember all that and believe me that question came up to me in an interview once that if I'd been coding for like several years and I remember thinking that that's a Microsoft framework. And I was about it. They asked me to go deeper into it and I I never had thought about it before because I know how to use it. I never really think about exactly what it is but it makes sense to really understand it and I'm going to break it down for you like this. Do you ever ask what Darden it is you can think of it like this. Dot Net is a framework used to build a variety of types of applications. If you need to go all the more into it you can say it includes two major components. One is the framework class library or FCL and the other the Common Language Runtime C-L are and from there you could describe what each of those does. Each of those two major components the C-L are is essentially a runtime virtual machine if you're familiar with Java is similar to the Java virtual machine and its purpose is to manage the code execution. And what do I mean by that handling memory management exception handling dealing with security and various other tasks. Now the other component the framework class library is essentially just a collection of reusable classes interfaces and data types use the access system functionality. What do I mean by that essentially pre-written code with a variety of functionalities code that you would have to write otherwise that would make programming a lot longer. For example if you need to just do a simple math function like subtractions or multiplications or additions you don't have to create code to do that. You can just use a class that adds or subtracts or multiplies if you need to keep a collection of items in some sort of an array or some sort of box. Then there's a class for an array. There's a class for various types of collection. There's a whole series of classes just for maintaining collections and that's it. The Dot Net framework is essentially a framework to build a variety type of application that's made up of the framework class library in common language runtime. Now there's a part two to this even though what I mention is an answer to what dotnet is specific to the Dot Net framework. But what can be confusing is that sometimes people use the term framework and platform interchangeably. And other times when they say platform they're really referring to the Dot Net ecosystem that is a family of technologies. So an addendum to what's dot net question can be dot net is also sometimes used to describe a family of technologies which includes but is not limited to the Dot Net Framework. Darknet core data it's standard Zimmern X-server this diagram here pretty much summarizes the family of technologies on the top we have the app models and on the bottom we have the common library and infrastructure. So let's break this up at the top here. You see that we have the dot net framework on the upper left hand side and that's essentially can be used to create Windows application using Windows Presentation Foundation. Or you can build web applications using HSP dot net. Windfarms also use for building Windows applications but it's an older technology. Now moving over to the right dot net core darknet core is essentially like the dot net framework except it's a slim down version. You can consider it Dot their framework like catnaps Corps claim to fame is that it's cross-talk compatible so you can actually use it to write code on different platforms such as IO worse now with it. You can use technology such as universal Windows platform or HSP darknet core SPDR and their core is also used to create web applications. And right below you can see that we can also create console applications. Now moving on over to the right Zimmern is a technology that Microsoft acquired and it allows us to create applications using C-Sharp but it can convert it into the language that can be use on other platforms such as IO worse or Android and mobile devices for Windows not because we have so many technologies. Microsoft created the dominant standard that this all sits on top of and it's essentially just a set of API eyes that all platforms must implement. That is that that standard is implemented by the DOT net framework. Their core and Zimri So this way the manner in which you code to do something in darknet core will be so drastically different than when you're doing it in Zimmern and essentially lessens the learning curve. Otherwise there would be no law and order and the way that you write something for domineer Couric could be drastically different than the dot net framework. And that would just make it difficult for all forms of developers. So now that you know libber more about what it is that's actually step back from all the theory and write some code. That's up next. When we install a visual studio a command line interface to Seelye named dot net is install as well as adopting the core runtime and to use it all you need to do is type in the word dot net and some command following it. For example you can create a folder that you're going to have your project in and within that folder you can use any of the following commands that you see here. And these here are the different types of projects. The first one is the console project. The next one is a class library the following one is a web project and so forth. At the bottom here is a link that you could use to go see a complete list of different commands available. And that brings you to this site over here. If we scroll down here some Selye common commands new restore build publish. You can click on any one of them they publish and then you'll get more details regarding the different parameters that you can use to get a little bit more granular with what you want to do. Let's go ahead and just write of simple program on our own to get a good idea of what we're talking about. First of all I want to go to a DOS prompt so I'll just come over here and just type in CMD D as a shortcut to bring us to the DOS prompt. And now I'll navigate to our code directory where we will be working from and within here. I'll navigate into the beginning. Modern C-Sharp father. And then there's less than one. There's a beginner folder and within that is topic A folder which we will now navigate into. And after that create our own folder which is going to be called first R.G. and it will do that by using the m k d r command which makes a directory. The nice thing about this is all the steps that were taking will be equivalent whether we're doing this on Windows or on another operating system because their core is cross-platform so all we want to do right now is demonstrate creating and running a console application. So to create one we can simply type in dot net new console and you can see the process got started and ran pretty quick. And if we take a look at the content of the directory now. So there's a couple of things that you'll notice. Now there's one a folder called RBJ and there's some content here that you rarely have to access some cache details and some Jason files with content related to the project. But what's most important for you to notice is the project file that ends with C S P R O J. For the project that we created. First Gyorgy. And then there's our program that C-s file and that has the actual code for the program that we created. And this is just a default. Hello app that the program creates. We could actually see the content simply by typing type programs and there you go. If you want to take a look at it in an easier fashion we can use Windows Explorer and open the content in Notepad. And there's the code. This is a very simple hello world application and I personally am pretty tired of hearing hello world every time there's a program demonstration so let's go ahead and change this to something different. Rise and shine. Shine in her eyes. How about that for being unique. I'll go ahead and say this and we're back to the DOS prompt. So now that we have this code here to run it what we normally do when we're dealing with the Dattner core framework we want to restore to get back any dependencies that's necessary. So the way we do that is by typing in darknet restore and then we can actually execute the program and we simply do that. And you might have guessed that darknet run and there you go shine and rise you've essentially created your first daftness core program and executed.

